<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Selenium – selenium</title><link>/tags/selenium/</link><description>Recent content in selenium on Selenium</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 20 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="/tags/selenium/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: IRC channels are moving to Libera.chat</title><link>/blog/2021/moving-to-libera-chat/</link><pubDate>Thu, 20 May 2021 00:00:00 +0000</pubDate><guid>/blog/2021/moving-to-libera-chat/</guid><description>
&lt;p>Yesterday, 19 May 2021, all the staff of Freenode, the IRC network, &lt;a href="https://fuchsnet.ch/freenode-resign-letter.txt">collectively
resigned as staff because of what they felt was a hostile takeover&lt;/a>.&lt;/p>
&lt;p>Freenode has always been seen as the home of Free and Open Software, so
it was natural that you could find us on the #selenium channel there. To maintain this openness, and inclusivity,
we are moving our IRC Channel over to &lt;a href="https://libera.chat">Libera.chat&lt;/a>. It is has been created
by the team that previously maintained Freenode.&lt;/p>
&lt;p>We are in the process of moving our Slack-to-IRC bridge over and hopefully the matrix bridge will be created
soon so that we can have a free and inclusive project on the new IRC Servers. There may be a few
hiccups so if you could bear with us.&lt;/p>
&lt;p>If you have any questions please feel free to reach out to me on &lt;a href="https://twitter.com/automatedtester">twitter&lt;/a>
or on one of the &lt;a href="https://selenium.dev/support">chat protocols&lt;/a> we support.&lt;/p>
&lt;p>Finally, thank you to &amp;ldquo;Milen from Bulgaria&amp;rdquo; for helping secure the channel for us on &lt;a href="https://libera.chat">Libera.chat&lt;/a>.&lt;/p></description></item><item><title>Blog: Observability in Selenium 4</title><link>/blog/2021/selenium-4-observability/</link><pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate><guid>/blog/2021/selenium-4-observability/</guid><description>
&lt;p>Diagnosing problems when the Selenium server isn&amp;rsquo;t working has never been easy. With Selenium 4, we have integrated &lt;a href="https://opentelemetry.io/">OpenTelemetry&lt;/a> to help you troubleshoot issues, optimize performance, and provide visibility into the system. By making the Selenium server observable, we are putting more power into your hands.&lt;/p>
&lt;h3 id="need-for-observability">Need for Observability&lt;/h3>
&lt;p>Selenium server enables distributed testing. Instead of running the browsers for tests locally, the tests use a remote browser driver that points to a server. The server makes “&lt;strong>smart&lt;/strong>” decisions to run tests on different remote servers. Every such remote server is capable of hosting different types of browsers and browser versions.&lt;/p>
&lt;p>Selenium 3 uses Hub as the coordinator. It receives new session requests and directs them to the appropriate Node. The Node is the remote end where the browser itself runs.&lt;/p>
&lt;p>Selenium 4 extends this to provide users with a way to set up a full-blown distributed system. Essentially, &lt;a href="https://www.selenium.dev/documentation/en/grid/grid_4/components_of_a_grid/">Selenium 4&lt;/a> splits the Hub into different components with additional enhancements. However, the Node’s role remains the same. To ensure the backward compatibility and simplicity of setting up Grid, standalone and hub-node mode are also available in the new Selenium server.&lt;/p>
&lt;p>Now picture running a full-blown distributed Selenium Grid with hundreds of Nodes with different browsers and browser versions. Testing at scale in such an infrastructure will involve large volumes of requests. How can one keep track of these requests? Enter Selenium Observability!&lt;/p>
&lt;h3 id="how-does-selenium-provide-observability">How Does Selenium Provide Observability?&lt;/h3>
&lt;p>Selenium uses OpenTelemetry to instrument tracing and event logs. Tracing keeps track of a request’s lifecycle. As a request moves through the distributed system, the trace of the request will contain all the information of its crucial operations performed along the way. Such operations are known as spans. A span can record timed logs called events, which ideally encapsulate the current state of the system. These are event logs.&lt;/p>
&lt;p>By default, the Selenium server enables tracing. Selenium server can run in different modes:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.selenium.dev/documentation/en/grid/grid_4/setting_up_your_own_grid/#standalone-mode">Standalone&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.selenium.dev/documentation/en/grid/grid_4/setting_up_your_own_grid/#hub-and-node-mode">Hub and Node&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.selenium.dev/documentation/en/grid/grid_4/setting_up_your_own_grid/#distributed-mode">Fully Distributed&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/SeleniumHQ/docker-selenium#readme">Docker&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Tracing and event logs are available for all the modes. The simplest way to see traces is in the form of console logs. By default, the Selenium server prints logs at the INFO level and above. To pass a logging level of choice while running a Selenium Grid use the &lt;a href="https://www.selenium.dev/documentation/en/grid/grid_4/advanced_features/observability/#visualizing-traces">log-level&lt;/a> flag. Setting the log-level to FINE will display traces and event logs as console logs.&lt;/p>
&lt;p>For a large scale system, consuming traces as logs might not be efficient.
Visualizing and querying traces will quickly help troubleshoot a request failure easily. &lt;a href="https://www.jaegertracing.io/">Jaeger&lt;/a> seamlessly integrates with OpenTelemetry to provide a rich experience of querying, visualizing and collecting request traces.&lt;/p>
&lt;p>Run &lt;code> java -jar selenium-server-&amp;lt;selenium-version&amp;gt;.jar info tracing&lt;/code>.&lt;/p>
&lt;p>It provides detailed and updated instructions to set up Jaeger with the Selenium server.
Visualizing the traces makes it easy to interpret a trace and understand request flow. Now Grid users can effortlessly trace a request, drill down into an error or query them to observe what is happening.&lt;/p>
&lt;figure>
&lt;img src="/images/blog/2021/trace.png"
alt="Trace example"/>
&lt;/figure>
&lt;p>Refer to &lt;a href="https://www.selenium.dev/documentation/en/grid/grid_4/advanced_features/observability/">Selenium Observability&lt;/a> for details.&lt;/p>
&lt;h3 id="full-stack-tracing">Full-Stack Tracing&lt;/h3>
&lt;p>The Java client binding supports tracing. Full-stack tracing allows tracing a request from the client to the server and back. Though the client is a single component, the client trace will contain spans that help build the request. It is easier to locate a client-side problem and fix the test if needed.&lt;/p>
&lt;p>We already saw how the server supports tracing and how to leverage it. For the client-side, add the Opentelemetry dependency to your project setup and add the necessary system properties to export the traces to Jaeger. Refer to &lt;a href="https://www.selenium.dev/documentation/en/remote_webdriver/remote_webdriver_client/#tracing-client-requests">RemoteWebdriver client&lt;/a> for detailed instructions.&lt;/p>
&lt;h3 id="leveraging-traces-and-event-logs">Leveraging Traces and Event Logs&lt;/h3>
&lt;p>The key to fixing a problem lies in knowing the error. For a known error situation, the event logs have you covered. It provides detailed error information and stack traces. Query the collected traces for a time range by the error code to identify the frequency of the error. It will help determine if the error is transient or not and accordingly take action.&lt;/p>
&lt;figure>
&lt;img src="/images/blog/2021/error-event-log.png"
alt="Error event log example"/>
&lt;/figure>
&lt;p>Observe the request latency to identify potential bottlenecks. Each trace will also contain time taken by each span. The issue could be in the underlying infrastructure setup, the network latency, or the code itself. Irrespective of the cause, it is easier to identify the problem area.&lt;/p>
&lt;p>Observability is slowly becoming a must-have property of a system. Selenium is now observable! Go ahead try it out. Let us know if you find anything that requires improvement on our end.&lt;/p></description></item><item><title>Blog: Selenium 4 Beta 1 Released</title><link>/blog/2021/selenium-4-beta-1/</link><pubDate>Mon, 15 Feb 2021 00:00:00 +0000</pubDate><guid>/blog/2021/selenium-4-beta-1/</guid><description>
&lt;p>We&amp;rsquo;re very happy to announce the release of the first beta of Selenium
4. We&amp;rsquo;re shipping this for Java, .Net, Python, Ruby, and JavaScript,
so if you&amp;rsquo;re using any of those languages, go and grab it from your
package manager of choice!&lt;/p>
&lt;p>This has been the culmination of a lot of work by so many people, not
only the &lt;a href="/structure/#tlc">project TLC&lt;/a>, but also of literally hundreds of people:
205 since we released Selenium 3.141.59, at the last count. A big
thank you to everybody who&amp;rsquo;s helped make this possible!&lt;/p>
&lt;p>So, what&amp;rsquo;s changed since Selenium 3? The answer is both &amp;ldquo;&lt;strong>not much&lt;/strong>&amp;rdquo;
and also &amp;ldquo;&lt;strong>almost everything&lt;/strong>&amp;rdquo;.&lt;/p>
&lt;p>By &amp;ldquo;&lt;strong>not much&lt;/strong>&amp;rdquo;, I mean that if your tests are working with Selenium
3 right now, you should be able to just upgrade your dependency to
Selenium 4. You will find that things that were marked &amp;ldquo;deprecated&amp;rdquo;
are now gone, but the advantage of the long time between the last
Selenium 3 release and this is that you&amp;rsquo;ve had plenty of time to try
and find alternatives.&lt;/p>
&lt;p>If this doesn&amp;rsquo;t work, please let us know! We&amp;rsquo;ve worked hard to ensure
compatibility between the releases, but it&amp;rsquo;s possible we may have
missed some things.&lt;/p>
&lt;p>One thing you may want to do to get ready for the update (which you
can do before updating the dependency itself!) is to update the
drivers you need. In particular, please update &lt;a href="https://github.com/mozilla/geckodriver/releases">geckodriver&lt;/a> to
0.29.0 or later.&lt;/p>
&lt;p>By &amp;ldquo;&lt;strong>almost everything&lt;/strong>&amp;rdquo;, I mean that under the covers there have
been substantial changes. We&amp;rsquo;ve rewritten the Selenium server to allow
it to work not only in the familiar &amp;ldquo;standalone&amp;rdquo; and &amp;ldquo;hub and node&amp;rdquo;
modes, but also in a new &amp;ldquo;distributed&amp;rdquo; mode, which makes it
signifcantly easier to deploy to something such as Kubernetes in a way
that scales well.&lt;/p>
&lt;p>The new server is also wired up with support for &lt;a href="https://opentelemetry.io">OpenTelemetry&lt;/a> and
exposes a &lt;a href="https://github.com/SeleniumHQ/selenium/blob/selenium-4.0.0-beta-1/java/server/src/org/openqa/selenium/grid/graphql/selenium-grid-schema.graphqls">GraphQL endpoint&lt;/a>, so that figuring what&amp;rsquo;s going
on in the Grid, and tracking down what&amp;rsquo;s gone wrong if something
happens, is easier than ever.&lt;/p>
&lt;p>Not all the changes are server-side. We recently wrote about the &lt;a href="/blog/2020/what-is-coming-in-selenium-4-new-tricks/">new
features in Selenium 4&lt;/a> that you can use in your tests, but some
of the main highlights are:&lt;/p>
&lt;ul>
&lt;li>Relative locators, for finding elements using terms that make
sense to us humans.&lt;/li>
&lt;li>The ability to intercept network traffic&lt;/li>
&lt;li>Authentication with basic or digest authentication.&lt;/li>
&lt;/ul>
&lt;p>We&amp;rsquo;ll be telling you more about these features in later blog posts,
and as we improve our documentation.&lt;/p>
&lt;p>If this sounds interesting, please download the beta from your
favourite package manager (maven, nuget, npm, pip, or the gem), or
directly from the &lt;a href="/downloads">Selenium site&lt;/a>.&lt;/p></description></item><item><title>Blog: New Tricks in Selenium 4</title><link>/blog/2021/what-is-coming-in-selenium-4-the-new-selenium-grid/</link><pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate><guid>/blog/2021/what-is-coming-in-selenium-4-the-new-selenium-grid/</guid><description>
&lt;blockquote>
&lt;p>In the fourth and final post in his series, Simon Stewart continues talking about what&amp;rsquo;s
coming in Selenium 4 and reviews what&amp;rsquo;s new in the Selenium Grid.&lt;/p>
&lt;/blockquote>
&lt;p>We’ve covered a lot of ground in the past few blog posts, including how to contribute to the project, and some
details of what you can expect as a Selenium user. But there’s more to Selenium than just the APIs you use to write
your tests, and one of the big features we’ve not covered yet is the refreshed Selenium Grid: a mechanism that
allows you to distribute your tests across a fleet of machines.&lt;/p>
&lt;p>Before going further, it’s always nice to acknowledge where we’ve come from, not only because it’s interesting, but
also because it helps explain the “why” of the refreshed design.&lt;/p>
&lt;p>Way back in the mists of time (2008), Jennifer Bevin and Jason Huggins worked on a system called the Selenium Farm
at Google. This was a fleet of machines sitting in a cupboard somewhere that allowed you to run the original
Selenium protocol. This was, of course, at Google scale, so there was more than one cupboard :)&lt;/p>
&lt;p>This allowed people at Google to distribute their tests and scale out beyond their individual machines.
This was such a great idea that when Jennifer talked about the Farm at a Selenium meetup, Philippe
Haringou (then at ThoughtWorks) decided to write an Open Source implementation of the same thing,
which he called “Selenium Grid”.&lt;/p>
&lt;p>Selenium Grid was a lovely piece of technology, but it had one drawback: it only spoke the original
Selenium RC protocol. That was fine, but WebDriver spoke a different wire protocol, which was called the
JSON Wire Protocol, and folks wanted to be able to use both Selenium RC and WebDriver at the same time.&lt;/p>
&lt;p>This is where Francois Reynaud enters the picture. He was working at eBay, reporting to Michael Palotas,
and he had written something like the original Selenium Grid, but which also worked with the JSON Wire
Protocol. They very kindly contributed that work to the Selenium project, and it formed the basis of the
Selenium Grid 2. We decided at the time that the Selenium standalone server would effectively be a
“grid of one”: it would have everything you needed in it to set up a Selenium Grid, as well as to work as
a single standalone server. Merging the code and getting it stable took a while, but thanks to the efforts
of Francois, Kristian Rosenvold, and many others, we merged Grid 2 into the main Selenium project and shipped
Selenium 2 in 2011.&lt;/p>
&lt;p>Even if 2011 doesn’t feel that long ago, the modern world has changed quite significantly. In 2011, we didn&amp;rsquo;t
have Docker. We didn&amp;rsquo;t have Kubernetes, we didn&amp;rsquo;t really have AWS. So, the Selenium Grid didn&amp;rsquo;t know that those
things were coming in, and wasn&amp;rsquo;t written to take advantage of them. Fortunately, we did have virtual machines
back then, and the Grid 2 had been designed to be able to support them.&lt;/p>
&lt;p>This was the hook that an excellent project called Zalenium. Developed by Diego Molina, Zalenium added a really
nice UI and support for Docker and Kubernetes—all built on top of the Grid 2. This has allowed the Selenium Grid to
continue to be relevant and useful to this day, which is an amazing achievement.&lt;/p>
&lt;p>But, like I said, it took us time to stabilise Grid 2: about six months of hard work, largely led by Kristian.
That’s because while Grid 2 was sophisticated, the code was hard to read and hard to maintain—and very few people
could do that. Worse, the merging of the Grid 2 and the original Selenium server was pretty crude; effectively
there were two separate servers shipped in the same binary. This led to problems occurring in the Grid but not
when run in standalone mode, and vice versa.&lt;/p>
&lt;p>With Selenium 4 we’ve decided to bite the bullet and address these three concerns. Firstly, we want something that
was easier to work on and maintain. Secondly, we want to merge the servers into a single unit. Thirdly, we want
something that will take advantage of the world of modern infrastructure we have available to us now, not just in
the form of Docker and Kubernetes, but also to be able to use emerging technologies such as distributed tracing.&lt;/p>
&lt;p>To do this, we looked at the functionality the Grid provided, and to model each piece as a component that we can
either run “in memory” (allowing us to have a single standalone server), or in a more distributed way, allowing
the “hub and node” architecture that we’re familiar with from the original Selenium Grid, to a fully distributed
design.&lt;/p>
&lt;p>The first component is the “router”. It serves as the entry point to the Grid. You can expose it to the internet
and it directs requests to the Grid. It’s designed to be stateless, and so you can add more to Grid as you find
you need to.&lt;/p>
&lt;p>When the router sees a new session request, it places it on a “session queue.” The session queue is read by a
component called the “distributor,” which maintains a model of all the places in the Grid where a session could be
run: we call them “slots”. The slots are hosted by components called “nodes,” and each node can have one or more
slots. When the distributor pulls a new session request from the queue, it identifies the most appropriate slot
to use, and forwards the request to the node which owns the slot. Once the node has started the session, the
distributor puts the session ID and the URL of the Node that is running the test into the “session map”—you can
think of the session map as being a simple map of a session ID to URL—and the new session response is sent
back to the waiting test.&lt;/p>
&lt;p>Requests for running sessions (that is, for most webdriver calls!) are handled slightly differently. The router
will use the session map to look up which node to forward the request to, avoiding the need to involve the
distributor entirely. This means that you can just keep adding nodes to the Grid, and there are fewer bottlenecks
in the architecture to slow your requests down.&lt;/p>
&lt;p>Conceptually, there are these five moving pieces within the Grid. But there&amp;rsquo;s actually a sixth one, which is a
message bus. The five Grid components communicate internally through the message bus, but the actual components
that you need to think about when you&amp;rsquo;re thinking about the Grid are the Router, Session Queue, Distributor, and
Nodes.&lt;/p>
&lt;p>When you run Selenium Grid 4 in “standalone” mode, you actually get a “grid of one”. We wire up all these
components in a single process, but they’re all still there.&lt;/p>
&lt;p>You can also run it in the traditional Hub and Node approach that you&amp;rsquo;ve seen with Selenium Grid 2, where you
fire up a Hub and a Node and it registers. If you&amp;rsquo;ve used Selenium Grid recently, that&amp;rsquo;s probably the architecture
that you&amp;rsquo;re familiar with. In this case, most of the components (the router, session queue, and distributor) are
running in the Hub, and the Nodes run the sessions themselves.&lt;/p>
&lt;p>What’s new with Grid 4 is that you can go into a fully distributed mode if you want to. Typically, you would want
to use something like Kubernetes for this, and some of the key components are designed to store data using a
database or Redis for better reliability and scalability.&lt;/p>
&lt;p>Something to note is that when running a distributed Grid, it becomes really difficult to figure out what is
happening, particularly when something goes wrong. To alleviate that problem, we have adopted Open Telemetry to
bring observability into the Grid. What do we mean by observability? It simply means that we want to be able to
see everything that happens.&lt;/p>
&lt;p>Finally, we’d like to expose information about the running Grid in meaningful and useful ways. The original
Grid supported both JMX (a Java management API) and an HTML-based console. While nice, this didn’t make it easy
to query specific areas of the Grid that you might be interested in that weren’t surfaced by the UI (for example,
how many slots are available, or to find out which node a particular session is running on) To provide more
flexibility, we’ve chosen to provide a GraphQL endpoint for the Grid. To ensure that GraphQL endpoint is
sufficiently flexible, we’re building the new Grid console using it. That should allow you to also extract useful
metrics and information from the Grid for your monitoring needs.&lt;/p>
&lt;p>Those are some highlights of the new Selenium Grid. What are you the most excited about?&lt;/p>
&lt;p>&lt;em>This was originally posted at &lt;a href="https://saucelabs.com/blog/whats-coming-in-selenium-4-the-new-selenium-grid">https://saucelabs.com/blog/whats-coming-in-selenium-4-the-new-selenium-grid&lt;/a>&lt;/em>&lt;/p></description></item><item><title>Blog: New Tricks in Selenium 4</title><link>/blog/2020/what-is-coming-in-selenium-4-new-tricks/</link><pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate><guid>/blog/2020/what-is-coming-in-selenium-4-new-tricks/</guid><description>
&lt;blockquote>
&lt;p>In the third post in his series, Simon Stewart continues talking about what&amp;rsquo;s coming in
Selenium 4 and reviews some of the tricks in the new release.&lt;/p>
&lt;/blockquote>
&lt;p>In my last posts, we talked about
&lt;a href="/blog/2020/what-is-coming-in-selenium-4-how-can-i-contribute">how to contribute to Selenium&lt;/a>, and
&lt;a href="/blog/2020/what-is-coming-in-selenium-4-why-the-major-version-bump">why we’re bumping the version number to 4&lt;/a>.
That’s enough preamble! Today, we’ll cover some details about the new tricks and capabilities
that Selenium 4 offers.&lt;/p>
&lt;h2 id="finding-elements-and-relative-locators">Finding Elements, and Relative Locators&lt;/h2>
&lt;p>You know, finding elements on a page can be really difficult. I&amp;rsquo;ve seen loads of people using
very complicated XPATH expressions, and trying to figure out complex CSS selectors and things
like that. There have been whole talks about the subject at SeleniumConf. Surely there must
be a better way to do this?&lt;/p>
&lt;p>Think about how we describe where an element is on the page. Think about how you’d do this
over the phone. You’d never talk about the raw DOM, “Ah, find the fifth DIV element nested
inside the SPAN with an ‘id’ of ‘foo’”. You’d just never say that! Instead, you’d say
something like, “just find that thing above that image, and to the right of that link,”
when talking about where things are located on the page.&lt;/p>
&lt;p>A long time ago, a project called &lt;a href="https://sahipro.com">Sahi&lt;/a> started to locate elements
like this. Sahi had &lt;a href="https://sahipro.com/docs/sahi-apis/accessor-api-basics.html#Use%20of%20Positional%20Relation%20APIs">Relation APIs&lt;/a>, which are a lovely way of finding elements,
and it was very, very fluent and pleasant to use. When I was starting WebDriver years ago,
I was talking with &lt;a href="https://twitter.com/narayanraman">Narayan&lt;/a> (creator of Sahi) and I
promised him that I was going to hold off implementing this flagship feature of Sahi. It
was something that was lovely, but it was also something Sahi was rightly proud of. However,
there are now other tools, such as Tyco, that are implementing this style of API, so it
seems like the time is right to do the same in Selenium. In Selenium 4 we call them
“relative locators.” You may sometimes see us refer to them as “friendly locators,” since the
initial implementation called them that, but “relative” better describes how they work. We
have a handful of them: near, above, below, left of, right of. They allow you to talk in human
language about where an element is on a page.&lt;/p>
&lt;p>Looking at the future, we are also planning to enable users to add new types of locators,
not only on the, on the client side, but also to the Selenium Server. For example, although
JS UI frameworks come and go (anyone else remember using jquery?), it’d be nice to be able
to add a custom locator for the current tools people like, such as React.&lt;/p>
&lt;h2 id="authenticating-to-web-sites">Authenticating to Web Sites&lt;/h2>
&lt;p>One feature that people have been asking for since we started the project has been the ability
to authenticate to a web site. Previously, you could do this by crafting the URL the browser
went to properly, but this leaks credentials to any man-in-the-middle and leaves them in server
logs, so browsers have slowly removed this piece of functionality. That’s unfortunate, since
it’s something that we know people frequently need to do in their tests. In Selenium 4, we
now offer a mechanism to register a username and password that can be used to authenticate against these sites.&lt;/p>
&lt;h2 id="intercepting-network-traffic">Intercepting Network Traffic&lt;/h2>
&lt;p>A common complaint of Selenium tests is that they’re slow and flaky. While the bindings to the
browser are excellent, and fully described by the W3C WebDriver spec, it is true that any end-to-end
test is likely to suffer more flakiness than a simple unit test—there are just more moving parts,
and more possibilities for things to go wrong.&lt;/p>
&lt;p>One way to resolve this issue is to stub out the backend of the application, intercepting network
traffic in the test and returning pre-canned responses. Tools such as &lt;a href="http://www.mbtest.org">mountebank&lt;/a>
make this easy for API testing. Wouldn’t it be nice if there was a similar tool for Selenium?&lt;/p>
&lt;p>With Selenium 4, we now provide a mechanism to do this, using the NetworkInterceptor (well, that’s
what we call it in the Java bindings). Pass it your WebDriver instance, and it’ll be called every time
the browser is about to make an HTTP request, allowing you to return almost anything you want&lt;/p>
&lt;h2 id="the-chrome-debugging-protocol">The Chrome Debugging Protocol&lt;/h2>
&lt;p>As I mentioned previously, one of the nice things about Selenium 4 is our work to ensure a stable
and modern user-facing API. What does this mean? To start, we need to acknowledge that after a long
time there’s now competition back in the browser automation space. Notably in the form of Puppeteer
and Cypress, and taking a step back, what do they offer? They build upon the
&lt;a href="https://chromedevtools.github.io/devtools-protocol/">Chrome DevTools Protocol (CDP)&lt;/a>&amp;gt;, which is a
protocol developed to enable a debugger inside Chromium-based browsers.&lt;/p>
&lt;p>Because of what it was designed to do, it is a chatty protocol, and not a user-facing API that
allows you to introspect into the browser. Worse, introduce a network hop between the test and the
browser, this chattiness leads to slower tests as the network latency increases. That is why tools
such as Puppeteer want you to run on the local machine. That’s great for the speed of an individual
test, but makes parallelisation harder, as you can&amp;rsquo;t use services such as Sauce Labs easily.&lt;/p>
&lt;p>To complicate matters, because the CDP is designed as a &lt;em>debugging&lt;/em> protocol, it can change with no
notice between versions. That’s why Puppeteer and Cypress are tied to specific versions of browsers,
and that causes a dilemma for you as a test author: how do you test on multiple versions of a browser?
Updating the test API to get a different browser can lead to you no longer making valid API calls.
Not doing so ties you to a potentially outdated version of a browser.&lt;/p>
&lt;p>Despite this, using the CDP opens up a host of possibilities, and that’s why we’ve added support
for it in Selenium 4. In fact, some of our new features are built on top of it (though we hide the details!)&lt;/p>
&lt;p>But we’ve also gone further that just adding basic support. Selenium 4 can support multiple versions
of the CDP at the same time, meaning you can test with both the current and beta versions of Chromium-based
browsers without needing to rewrite tests. We do this by providing an “idealised CDP”, which is
stable and covers the features we feel tests need. If that idealised view of the world isn’t enough
for you, we also expose the raw CDP APIs too, giving you flexibility to choose what’s best for your tests.&lt;/p>
&lt;p>We’re feeding this experience into the new W3C WebDriver Bidi specification, which is helping make that
a better fit for testers.&lt;/p>
&lt;p>I am leaving out of this post all the details related to another important trick in Selenium 4, the new
Selenium Grid, which I will cover in the next post. Stay tuned!&lt;/p>
&lt;p>&lt;em>This was originally posted at &lt;a href="https://saucelabs.com/blog/new-tricks-in-selenium-4">https://saucelabs.com/blog/new-tricks-in-selenium-4&lt;/a>&lt;/em>&lt;/p></description></item><item><title>Blog: What’s Coming in Selenium 4: Why The Major Version Bump?</title><link>/blog/2020/what-is-coming-in-selenium-4-why-the-major-version-bump/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><guid>/blog/2020/what-is-coming-in-selenium-4-why-the-major-version-bump/</guid><description>
&lt;blockquote>
&lt;p>In the second post in this series, Simon Stewart continues talking about
what&amp;rsquo;s coming in Selenium 4 and why this release has a major version bump.&lt;/p>
&lt;/blockquote>
&lt;p>In my &lt;a href="/blog/2020/what-is-coming-in-selenium-4-how-can-i-contribute/">last post&lt;/a>,
I shared a bit about how the Selenium project works overall. Now, let’s start talking about Selenium 4
and what’s coming. One thing I think I should clear up is &amp;ldquo;why the major version number bump?&amp;rdquo;&lt;/p>
&lt;p>Sometimes I joke that the major reason for the version number bump is that while the digits of Pi are
infinite, when we went from 3.14 to 3.141, people got a little bit upset. Moving to 3.141.5 and then
3.141.59 was as far as we wanted to push that particular idea :)&lt;/p>
&lt;p>More seriously, the first reason is that we have a revised Selenium IDE. Years ago, this used to be
Firefox only because it used the XPI extension mechanism (which was specific to Firefox). It’s now a
web component, and you can download it for Chrome, Firefox, and anything else that supports Web
Components. There is currently work to rewrite it as an Electron app, which will allow us to make
better use of the native OS the IDE is running on. That work was largely pushed forward by developers
working at Applitools. They started from a base of the original Selenium IDE that had been migrated
to use Web Components by a company called SideX. It’s been a fantastic example of the community
working together well.&lt;/p>
&lt;p>Secondly, we have fully adopted the W3C WebDriver protocol, and have dropped support for the original
home-grown wire protocol. The way that Selenium communicates with a web browser is via a wire protocol
that’s effectively just JSON over HTTP. Originally this grew organically as we figured things out,
and we tried to make browsers do what we needed them to. That original protocol is known as the JSON
wire protocol because it spoke JSON over the wire (and we’re not great at coming up with very original names).&lt;/p>
&lt;p>That original protocol was the base for the W3C WebDriver protocol, which smoothed some of the rough
edges, and brought some much needed consistency to the protocol. The two major areas the standardised
protocol improved on included session creation, where we removed considerable ambiguity, and by providing
a far richer API for specifying user actions.&lt;/p>
&lt;p>So what does this adoption of the W3C protocol mean for you? I&amp;rsquo;ll be honest: it probably doesn’t mean
much to you at all. If you&amp;rsquo;re using a modern browser (released over the past couple of years), you will
find that actually you already speak the W3C protocol with Selenium 3.&lt;/p>
&lt;p>So who does care about the protocol dialects? When we talk about companies like Sauce Labs who provide
Selenium as a service—they care about it. The ecosystem is ready for this next step, because the
technical folks at these companies have ensured that they understand and comply with the W3C protocol,
and folks from the Selenium project have been there offering help and advice as needed.&lt;/p>
&lt;p>One of the other nice things about Selenium 4 is that we&amp;rsquo;ve done our best to ensure a stable user-facing
API. That means when you upgrade your project from Selenium 3 to Selenium 4, it should be a drop-in
upgrade. You just change the version number, recompile and you should be done.&lt;/p>
&lt;p>There are a few caveats that you should be aware of, however! The major one is that if in the last version
of Selenium 3 a method was deprecated, it’s now probably gone. We’ve taken the opportunity of a major
version bump to delete them and clean up the behind-the-scenes internals people don’t normally get to see.
If you’re a software developer, you may recognise this as us paying off some of our technical debt :)&lt;/p>
&lt;p>Stay tuned for the next post, where I’ll go over some new tricks in Selenium 4.&lt;/p>
&lt;p>&lt;em>This was originally posted at &lt;a href="https://saucelabs.com/blog/whats-coming-in-selenium-4-why-the-major-version-bump">https://saucelabs.com/blog/whats-coming-in-selenium-4-why-the-major-version-bump&lt;/a>&lt;/em>&lt;/p></description></item><item><title>Blog: What’s Coming in Selenium 4: How Can I Contribute?</title><link>/blog/2020/what-is-coming-in-selenium-4-how-can-i-contribute/</link><pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate><guid>/blog/2020/what-is-coming-in-selenium-4-how-can-i-contribute/</guid><description>
&lt;blockquote>
&lt;p>In this new blog series all about the upcoming release of Selenium 4, Simon Stewart will
cover how the Selenium project works, who is involved, how you can get involved, and a
sneak peek at what’s new in Selenium 4.&lt;/p>
&lt;/blockquote>
&lt;p>As the lead of the Selenium project, I wanted to kick off a new blog series leading up to
the release of Selenium 4. During this series, I’ll talk all about how the Selenium project
works, who is involved, how you—yes, you!—can get involved, and we’ll get a sneak peek at
what’s new in Selenium 4. I&amp;rsquo;ve been speaking about this off and on for a while, but now
the 4.0 release is looming I wanted to start sharing in more depth.&lt;/p>
&lt;p>In this first post, we’ll start off with a brief discussion about how the Selenium project
itself runs and who does what, because that’s a really helpful piece to understand how and
why things happen the way they do on the project. In future posts, we’ll look at the new IDE,
and then we’ll talk about Selenium 4 in more depth, including the fact that it should be a
drop-in replacement for you. I’ll also review some new features that we’ve added to Selenium
4, and talk a bit about the modernized Selenium Grid. So let’s get started!&lt;/p>
&lt;h2 id="about-the-selenium-project">About the Selenium Project&lt;/h2>
&lt;p>Selenium is an Open Source project. It&amp;rsquo;s run under the aegis of the Software Freedom
Conservancy (SFC). The SFC is a group dedicated to pushing forward Free and Open Source
software. Besides Selenium, they have a handful of projects you may have heard of, including
Samba, Mercurial and Git. The SFC allows us to focus on writing code and fixing bugs by
handling all the legal and financial stuff we’re not good at. They’re the ones that help
us negotiate contracts for when we want to run SeleniumConf, for example.&lt;/p>
&lt;p>Acting as a bridge between the project and the SFC is the Project Leadership Committee
(PLC). Currently, it’s made up of Jim Evans, Alexei Barantsev, Marcus Merrell, Manoj Kumar,
and myself. What do we do? Effectively, the PLC is about providing a smaller group of people
for the SFC to talk to when decisions need to be made about funding a conference, or how
best to respond to sponsorship agreements. Because we like to do as much work in the open
as possible, you can find us on the &lt;code>#selenium-plc&lt;/code> Slack channel, and almost every
conversation and topic is discussed here.&lt;/p>
&lt;p>One of the key qualifications for being on the PLC is a demonstrated commitment to helping
the Selenium project improve and succeed, and we recognise that the project is more than just
“code.” It’s a community, and the make up of the PLC reflects that.&lt;/p>
&lt;p>The Technical Leadership Committee (TLC) includes the people who set the technical direction
for the project. If you come over to the Selenium Slack, you can find the &lt;code>#selenium-tlc&lt;/code> channel,
which is where a lot of the technical conversations happen for the project. The TLC includes Jim
Evans, Alexei Barantsev, David Burns, Diego Molina, Titus Fortner, and me.&lt;/p>
&lt;p>How do you get on the TLC? Although the project governance document goes into more detail,
it can be summed up as simply as someone who’s demonstrated technical leadership on the project,
over an extended period of time. Just as with the PLC, being on the TLC doesn’t give someone more
authority, but they’re the ones who can merge PRs, and who can (if need be) commit directly to the tree.&lt;/p>
&lt;p>Again, the TLC tries to do as much work as possible in the open. If you’re ever interested in watching
the design discussions, or asking why a bit of the Selenium code base is structured the way it is, then
come and join us in the &lt;code>#selenium-tlc&lt;/code> Slack channel. There’s normally someone from the project there
who’ll be able to answer your questions!&lt;/p>
&lt;p>I wanted to share how the project works for one simple reason: to highlight one of the really important
things with Open Source, which is that anyone can contribute! You don&amp;rsquo;t need to be throwing code around
in order to be contributing, and &lt;a href="https://www.youtube.com/watch?v=PZ-BfM97PZk">you don’t need to be special&lt;/a>
in order to contribute your time and effort.&lt;/p>
&lt;p>So obviously there&amp;rsquo;s the people running the projects and writing code, but we couldn&amp;rsquo;t do that all on our own.
Every release includes contributions from a variety of people, not just the core development team. Also, we&amp;rsquo;re
always happy to accept patches. If you&amp;rsquo;re not quite sure where to start, I recommend you head to our
&lt;a href="https://github.com/seleniumhq/selenium/">GitHub page&lt;/a> and take a look at the project tab. That’s where you
can see the things that need to be done and what we&amp;rsquo;re working on.&lt;/p>
&lt;p>The other way to get involved is the way that everyone used to get involved with Open Source, which is by
what&amp;rsquo;s known as “scratching your own itch”. It&amp;rsquo;s if there&amp;rsquo;s something about the project, something about the
product you think could be a little bit better, download the source, edit it, and then send us a PR.&lt;/p>
&lt;p>We encourage you to get involved and contribute! On the Selenium website, there is a
&lt;a href="https://www.selenium.dev/governance/">page&lt;/a> that outlines in detail the steps to join the Selenium team.
Join the Selenium Slack channel to interact with us and ask questions. If you want to discuss something,
or if you don&amp;rsquo;t understand why the code is written the way it is, feel free to come on to that Slack channel
and talk to us. Also, if you&amp;rsquo;d like to see how the decision making is made, then please do feel free to come
on to the &lt;code>#selenium-tlc&lt;/code> or the &lt;code>#selenium-plc&lt;/code> channels to see those groups. Because we&amp;rsquo;re Open Source, we
try and do everything in the open.&lt;/p>
&lt;p>If you’d like to put faces to people’s Slack or IRC handles, then please note that there’s a regular team
meeting every other Thursday on Google Meet at 4:30pm (UK time!) We tend to just chat and discuss everything
from the project to the weather, but that’s a great way to get to know people a little better! :)&lt;/p>
&lt;p>Finally, if you’re having trouble getting to grips with the Selenium code base, then please do come and ask us
for help. We’ve done our best to make the on-ramp as easy to take as possible, but the project can seem complicated
and daunting when you’re getting started. We’re here to help!&lt;/p>
&lt;p>I hope you enjoyed this intro to the Selenium project. Next week, we’ll talk about why the major version bump to
Selenium 4. Stay tuned!&lt;/p>
&lt;p>&lt;em>This was originally posted at &lt;a href="https://saucelabs.com/blog/whats-coming-in-selenium-4-how-can-i-contribute">https://saucelabs.com/blog/whats-coming-in-selenium-4-how-can-i-contribute&lt;/a>&lt;/em>&lt;/p></description></item><item><title>Blog: SeleniumConf Virtual 2020 Recap</title><link>/blog/2020/selenium-conf-2020-recap/</link><pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate><guid>/blog/2020/selenium-conf-2020-recap/</guid><description>
&lt;img src="/blog/2020/selenium-conf-2020-recap/featured_selenium_conf_2020_recap_1_hu0c05a06f2dec34c46adb7995bcf4e8d5_68229_640x0_resize_catmullrom_2.png" width="640" height="212"/>
&lt;figure class="img-responsive">
&lt;img src="/blog/2020/selenium-conf-2020-recap/featured_selenium_conf_2020_recap_1.png"/>
&lt;/figure>
&lt;p>This year the &lt;a href="https://2020.seleniumconf.in/">Selenium Conference&lt;/a> was held virtually, and
despite that, the conference was again that exciting place where the Selenium community
meets every year to share and learn about the most popular browser automation tool in the
world. The conference offered talks about improved testing practices, new tools to simplify
the setup of automated tests, the future of Selenium, and lots of learnings from speakers
who shared their use cases and practical advice for how they use Selenium at work.&lt;/p>
&lt;p>Here are some takeaways and interesting talks from this year’s conference:&lt;/p>
&lt;h2 id="selenium-state-of-the-union">Selenium: State of the Union&lt;/h2>
&lt;p>A peek at the upcoming Selenium 4 release was possible thanks to the demo
&lt;a href="https://twitter.com/shs96c">Simon Stewart&lt;/a> gave during this traditional
&lt;a href="https://confengine.com/selenium-conf-2020/proposal/14020/selenium-state-of-the-union">talk&lt;/a>
that happens in every Selenium conference. Selenium 4 is shaping up nicely and will leave
the Alpha state soon. We are all looking forward to the betas, and a candidate release
shortly after that. The talk also invited other members of the Selenium team to share the
organizational work they have been doing in the project, including diversity, governance
and welcoming contributors.&lt;/p>
&lt;figure class="img-responsive my-5">
&lt;img src="/blog/2020/selenium-conf-2020-recap/selenium_conf_2020_recap_2.png"/>
&lt;/figure>
&lt;h2 id="build-a-responsive-typescript-wdio-framework">Build a responsive typescript wdio framework&lt;/h2>
&lt;p>&lt;a href="https://twitter.com/vibranttester">Varuna Srivastava&lt;/a> gave a
&lt;a href="https://confengine.com/selenium-conf-2020/proposal/13629/build-a-responsive-typescript-wdio-framework">talk&lt;/a>
together with &lt;a href="https://confengine.com/selenium-conf-2020/proposal/13629/build-a-responsive-typescript-wdio-framework">Wim Selles&lt;/a>
that showed how to build a robust and scalable framework for UI testing, based on WebdriverIO.
It showed concepts that are important when getting started with JavaScript, NodeJS, and the NPM
ecosystem. Furthermore, there was a broad overview of WebdriverIO and its shiny features, as well
as a demo on how to use TypeScript for testing. This is a recommended talk for anyone who wants to
get started on testing with JavaScript.&lt;/p>
&lt;figure class="img-responsive my-5">
&lt;img src="/blog/2020/selenium-conf-2020-recap/selenium_conf_2020_recap_3.png"/>
&lt;/figure>
&lt;h2 id="to-test-and-monitor-one-website-is-not-that-hard-but-what-if-you-need-to-do-it-to-over-40-websites">To Test and monitor one website is not that hard, but what if you need to do it to over 40 websites?&lt;/h2>
&lt;p>This was an interesting &lt;a href="https://confengine.com/selenium-conf-2020/schedule">talk&lt;/a> from
&lt;a href="https://twitter.com/qa_jesus">Jesus Sanchez&lt;/a>, where in order to avoid having the QA department as
a bottleneck for the growing team of developers, they took the approach of building tools and resources
for developers and enabling them to write tests for their over 40 websites. It is an interesting take
on how the QA role becomes a facilitator and an enabler for the rest of the organization, while
coaching everyone on how to write automated tests and the value of testing the right thing.&lt;/p>
&lt;figure class="img-responsive my-5">
&lt;img src="/blog/2020/selenium-conf-2020-recap/selenium_conf_2020_recap_4.png"/>
&lt;/figure>
&lt;h2 id="careers-in-testing--identify-your-superpower">Careers in Testing – Identify your SuperPower&lt;/h2>
&lt;p>&lt;a href="https://twitter.com/smitapmishra">Smita Mishra&lt;/a> gave a
&lt;a href="https://confengine.com/selenium-conf-2020/proposal/13771/careers-in-testing-identify-your-superpower">captivating&lt;/a>
talk where she invited all testers to think what alternative paths could be present in their careers,
given that some organizations value testing more than others. Smita showed that if you understand what
you enjoy the most, and find a way to combine that with your current and future skills, it could show
you how to grow your career by finding and following a path of the least resistance.&lt;/p>
&lt;figure class="img-responsive my-5">
&lt;img src="/blog/2020/selenium-conf-2020-recap/selenium_conf_2020_recap_5.png"/>
&lt;/figure>
&lt;h2 id="developing-selenium-tests-with-junit-5">Developing Selenium tests with JUnit 5&lt;/h2>
&lt;p>JUnit 5 is the new iteration of this popular testing framework, and it implements a new programming
and extension model named Jupiter. &lt;a href="https://twitter.com/boni_gg">Boni García&lt;/a> presents in this
&lt;a href="https://confengine.com/selenium-conf-2020/proposal/13255/developing-selenium-tests-with-junit-5">talk&lt;/a>
a JUnit 5 extension called &lt;a href="https://bonigarcia.github.io/selenium-jupiter/">Selenium-Jupiter&lt;/a>,
the demos showed illustrate how useful this extension is because it simplifies the test configuration
and reduces the boilerplate code that needs to be written in order to have a test running. Have a
look at it because it is well maintained and documented, and it will help you by reducing the time
needed to set up your tests.&lt;/p>
&lt;figure class="img-responsive my-5">
&lt;img src="/blog/2020/selenium-conf-2020-recap/selenium_conf_2020_recap_6.png"/>
&lt;/figure>
&lt;h2 id="im-not-special">I&amp;rsquo;m Not Special&lt;/h2>
&lt;p>One of the &lt;a href="https://confengine.com/selenium-conf-2020/proposal/14005/im-not-special">keynotes&lt;/a> in
the conference was done by &lt;a href="https://twitter.com/jimevansmusic">Jim Evans&lt;/a>, where he relates a
personal journey through his career and how clearly “not special” he considers himself. One of
the key takeaways is the fact that you become a major contributor and you do not need to be special
to do that. No review will make enough justice to highlight how heartwarming and encouraging this
talk was, it is a must watch for anyone who wants to become a contributor.&lt;/p>
&lt;figure class="img-responsive my-5">
&lt;img src="/blog/2020/selenium-conf-2020-recap/selenium_conf_2020_recap_7.png"/>
&lt;/figure>
&lt;h2 id="closing-keynote">Closing keynote&lt;/h2>
&lt;p>The final session of the conference was the
&lt;a href="https://confengine.com/selenium-conf-2020/proposal/14836/q-a-with-the-selenium-committee">keynote&lt;/a>
where the project committers do an open Q&amp;amp;A with the community. Different opinions were shared around
the question of the challenges the Selenium project sees by the growing number of browser automation
tools. In addition, all project contributors made an open invitation to the community to get involved
in the project, if you are interested in that, please check the project’s
&lt;a href="https://www.selenium.dev/governance/">governance document&lt;/a>. This is another recommended session
to watch, lots of insights about how the project and its individuals work that will help the community
understand the project better.&lt;/p>
&lt;figure class="img-responsive my-5">
&lt;img src="/blog/2020/selenium-conf-2020-recap/selenium_conf_2020_recap_8.png"/>
&lt;/figure>
&lt;p>&lt;em>This was originally posted at &lt;a href="https://opensource.saucelabs.com/blog/selenium_conf_2020_recap/">https://opensource.saucelabs.com/blog/selenium_conf_2020_recap/&lt;/a>&lt;/em>&lt;/p></description></item><item><title>Blog: Selenium 4.0 Alpha 6 is out!</title><link>/blog/2020/selenium-4-alpha-6-is-out/</link><pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate><guid>/blog/2020/selenium-4-alpha-6-is-out/</guid><description>
&lt;p>We are very pleased to announce the release of &lt;a href="http://www.selenium.dev/downloads/">Selenium 4.0 Alpha 6&lt;/a>.&lt;/p>
&lt;p>All the information can be seen in different tweets from the project contributors, here they are all in one place:&lt;/p>
&lt;p>&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Happy Friday! I&amp;#39;ve just pushed Selenium 4.0a6 for Java. There&amp;#39;s a lot of nice changes:&lt;br>&lt;br>* Full remoting of the CDP protocol across the Grid&lt;br>* The skeleton of our GraphQL support&lt;br>* Better configuration options, especially for Nodes, via TOML&lt;br>* A bajillion improvements &amp;amp; fixes&lt;br>&lt;br>1/5&lt;/p>&amp;mdash; Simon Mavi Stewart (@shs96c) &lt;a href="https://twitter.com/shs96c/status/1266307374941437952?ref_src=twsrc%5Etfw">May 29, 2020&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">As ever, this release is the product of hard work and contributions not only from the core team (special thanks to &lt;a href="https://twitter.com/barancev?ref_src=twsrc%5Etfw">@barancev&lt;/a> and &lt;a href="https://twitter.com/diemol?ref_src=twsrc%5Etfw">@diemol&lt;/a>. You&amp;#39;ve done amazing work!) but also from a host of other people. In that spirit, I&amp;#39;d like to thank… 2/5&lt;/p>&amp;mdash; Simon Mavi Stewart (@shs96c) &lt;a href="https://twitter.com/shs96c/status/1266307376279359488?ref_src=twsrc%5Etfw">May 29, 2020&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">In no particular order:&lt;br>&lt;br>* Amit Bhoraniya&lt;br>* &lt;a href="https://twitter.com/bongosway?ref_src=twsrc%5Etfw">@bongosway&lt;/a>&lt;br>* Gerry Gao&lt;br>* Sridhar Upputuri&lt;br>* John Chen&lt;br>* &lt;a href="https://twitter.com/alb_i986?ref_src=twsrc%5Etfw">@alb_i986&lt;/a>&lt;br>* Rahul Shah&lt;br>* &lt;a href="https://twitter.com/ulfjack?ref_src=twsrc%5Etfw">@ulfjack&lt;/a> &lt;br>&lt;br>I&amp;#39;ve linked to the twitter handle where I know it. Give &amp;#39;em a high five! Selenium wouldn&amp;#39;t be possible without the help of the community! 3/5&lt;/p>&amp;mdash; Simon Mavi Stewart (@shs96c) &lt;a href="https://twitter.com/shs96c/status/1266307377420275713?ref_src=twsrc%5Etfw">May 29, 2020&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">I&amp;#39;m hoping that the next alpha will be the last alpha. The &amp;quot;big ticket&amp;quot; items remaining are:&lt;br>&lt;br>* Provide nice APIs to take advantage of the CDP&lt;br>* Flesh out the GraphQL support&lt;br>* A nice UI to take advantage of the GraphQL endpoint&lt;br>* Robustness work in the Grid&lt;br>&lt;br>4/5&lt;/p>&amp;mdash; Simon Mavi Stewart (@shs96c) &lt;a href="https://twitter.com/shs96c/status/1266307378485563392?ref_src=twsrc%5Etfw">May 29, 2020&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">You can come and join in the fun by either heading over to the GitHub project and picking a task (&lt;a href="https://t.co/2ifj6CkeEV">https://t.co/2ifj6CkeEV&lt;/a>) or (and!) coming to have a chat on Slack &lt;a href="https://t.co/4aEDqyI6gq">https://t.co/4aEDqyI6gq&lt;/a> 5/5&lt;/p>&amp;mdash; Simon Mavi Stewart (@shs96c) &lt;a href="https://twitter.com/shs96c/status/1266307379513171968?ref_src=twsrc%5Etfw">May 29, 2020&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">I have just tagged &lt;a href="https://twitter.com/hashtag/Selenium?src=hash&amp;amp;ref_src=twsrc%5Etfw">#Selenium&lt;/a> 4a6 on GitHub. It&amp;#39;s got a lot of nice cleanups as we edge closer to a proper &lt;a href="https://twitter.com/hashtag/Selenium?src=hash&amp;amp;ref_src=twsrc%5Etfw">#Selenium&lt;/a> 4 release!&lt;/p>&amp;mdash; David Burns - #gotYourBackNHS (@AutomatedTester) &lt;a href="https://twitter.com/AutomatedTester/status/1266025050706149379?ref_src=twsrc%5Etfw">May 28, 2020&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">selenium-webdriver 4.0.0.alpha6 has just been released. The biggest change is an experimental support for Chrome DevTools protocol! Read more in changelog &lt;a href="https://t.co/1l2XYkaEfB">https://t.co/1l2XYkaEfB&lt;/a>.&lt;a href="https://twitter.com/hashtag/selenium?src=hash&amp;amp;ref_src=twsrc%5Etfw">#selenium&lt;/a> &lt;a href="https://twitter.com/hashtag/ruby?src=hash&amp;amp;ref_src=twsrc%5Etfw">#ruby&lt;/a> &lt;a href="https://twitter.com/hashtag/devtools?src=hash&amp;amp;ref_src=twsrc%5Etfw">#devtools&lt;/a>&lt;/p>&amp;mdash; Alex Rodionov (@p0deje) &lt;a href="https://twitter.com/p0deje/status/1266144106885111814?ref_src=twsrc%5Etfw">May 28, 2020&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;/p>
&lt;p>Happy hacking!&lt;/p></description></item><item><title>Blog: SeleniumConf London 2019 Videos and Pictures</title><link>/blog/2019/seleniumconf-london-2019/</link><pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate><guid>/blog/2019/seleniumconf-london-2019/</guid><description>
&lt;p>Check out all the SeleniumConf London 2019 videos and photos!&lt;/p>
&lt;p>You can find all the videos &lt;a href="https://www.youtube.com/playlist?list=PLRdSclUtJDYXLzxGo9yjcLPDuoNGWkj6t">here&lt;/a>, and all the
pictures &lt;a href="https://www.flickr.com/photos/whiteoctevents/albums/72157711392433853">here&lt;/a>.&lt;/p>
&lt;p>If you cannot wait to get started, feel free to watch below Simon&amp;rsquo;s &amp;ldquo;State of the Union&amp;rdquo; keynote!&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/RGM4FtDA06M" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>Blog: Selenium IDE Is Dead, Long Live Selenium IDE!</title><link>/blog/2018/long-live-selenium-ide/</link><pubDate>Mon, 06 Aug 2018 00:00:00 +0000</pubDate><guid>/blog/2018/long-live-selenium-ide/</guid><description>
&lt;p>In August of 2017 Simon shared the bleak, hard news that as of Firefox 55 Selenium IDE would no longer work.
Selenium IDE (or as we’ll refer to it from here on out – the Legacy IDE) was, and is, dead.&lt;/p>
&lt;p>Since then quite a lot has happened with the IDE. We have a new version of it which we are referring to as… Selenium IDE!&lt;/p>
&lt;p>&lt;strong>It is currently in “alpha” and available for use in both
&lt;a href="https://chrome.google.com/webstore/detail/selenium-ide/mooikfkahbdckldjjndioackbalphokd">Chrome&lt;/a> and
&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/">Firefox&lt;/a>.&lt;/strong>&lt;/p>
&lt;p>In his post Simon also mentioned “the fine people at &lt;a href="https://applitools.com">Applitools&lt;/a>“. This includes Tomer Steinfeld,
Dave Haeffner, and Doron Zavalevsky. Together, along with contributions from the rest of the Selenium community and
the SideeX project, we have been able to get the new Selenium IDE out into the wild. We are also working to close the gap
on feature parity with its predecessor along with adding some much needed enhancements to the tool (more on that in future posts).&lt;/p>
&lt;p>We’d love for you to give the new IDE a try and let us know what you think. Visit either the
&lt;a href="https://chrome.google.com/webstore/detail/selenium-ide/mooikfkahbdckldjjndioackbalphokd">Chrome Web Store&lt;/a> or
&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/selenium-ide/">Firefox Add-ons&lt;/a> to install it. For info on how to
use the tool, you can check out the getting started documentation on Selenium HQ.&lt;/p>
&lt;p>If you have any questions you can find us on the &lt;a href="https://selenium.dev/support/">Selenium Slack/IRC chat channel&lt;/a>.
Think you found a bug? &lt;a href="https://github.com/SeleniumHQ/selenium-ide/issues">File an issue&lt;/a>. Want to contribute?
Take a look at the project on &lt;a href="https://github.com/SeleniumHQ/selenium-ide">GitHub&lt;/a>.&lt;/p>
&lt;p>Happy Testing!&lt;/p></description></item><item><title>Blog: Firefox 55 and Selenium IDE</title><link>/blog/2017/firefox-55-and-selenium-ide/</link><pubDate>Wed, 09 Aug 2017 00:00:00 +0000</pubDate><guid>/blog/2017/firefox-55-and-selenium-ide/</guid><description>
&lt;p>The bad news: &lt;strong>from Firefox 55 onwards, Selenium IDE will no longer work&lt;/strong>.&lt;/p>
&lt;p>The reasons for this are complex, but boil down to two main causes:&lt;/p>
&lt;ol>
&lt;li>Browsers are complicated pieces of software that are constantly evolving. Mozilla has been working hard to make Firefox &lt;a href="https://blog.mozilla.org/blog/2017/06/13/faster-better-firefox/">faster and more stable&lt;/a>, while still retaining the flexibility and ease of extension that we’ve come to know and love. As part of that process, Firefox is switching extensions from the original “&lt;a href="https://blog.mozilla.org/addons/2016/11/23/add-ons-in-2017/">XPI&lt;/a>” format, to a newer, more widely adopted “&lt;a href="https://developer.mozilla.org/en-US/Add-ons/WebExtensions">Web Extension&lt;/a>” mechanism.&lt;/li>
&lt;li>The Selenium project lacks someone with the time and energy to move the IDE forwards to take advantage of the new technologies.&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="http://www.seleniumhq.org/">Selenium&lt;/a> is one of the most widely used pieces of testing software there is. Despite this, the team of people regularly contributing is small: since the start of the year, there are only 11 people who have made more than 10 commits, with two people accounting for more than half of those. Since 2016, only one person has been maintaining the IDE.&lt;/p>
&lt;p>Selenium is an Open Source project. None of the core contributors — not the IDE maintainer, not the language binding owners — are paid to work on work on it. They do it because they love working on the code, and they typically do it in their “copious free time”. The IDE maintainer has had almost none of that to spare. We should all be thanking that committer for his time and effort. Thank you, Samit!&lt;/p>
&lt;p>So what can we do to move forward? The first thing is that there are now a wealth of tools that are stepping up to fill the gap. You should go and have a look at them. The second thing is that there is an effort to rebuild IDE using modern APIs, to be usable across more than just Firefox. The fine people at &lt;a href="https://applitools.com/">Applitools&lt;/a> are helping with this effort.&lt;/p>
&lt;p>The third thing? That’s you. &lt;strong>You could help us&lt;/strong>.&lt;/p>
&lt;p>If you believe that a friendly UI for quickly recording and playing back tests is a useful Open Source tool, then please come and join us! The main technical discussions are happening on the #selenium IRC channel. If you’d prefer &lt;a href="https://seleniumhq.herokuapp.com/">Slack&lt;/a>, you can join us on that too. Or there’s the ever useful &lt;a href="https://groups.google.com/forum/#!forum/selenium-developers">selenium-developers&lt;/a> mailing list. Come onboard. We’d love your help, and IDE is a wonderful thing to contribute to!&lt;/p></description></item><item><title>Blog: Selenium 3.0: Out Now!</title><link>/blog/2016/selenium-3-0-out-now/</link><pubDate>Thu, 13 Oct 2016 00:00:00 +0000</pubDate><guid>/blog/2016/selenium-3-0-out-now/</guid><description>
&lt;p>We are very pleased to announce the release of &lt;a href="http://www.seleniumhq.org/download/">Selenium 3.0&lt;/a>. If you’ve been waiting for a stable release since 2.53.1, now’s your chance to update. And if you do, here is what you’ll find:&lt;/p>
&lt;p>As &lt;a href="https://seleniumhq.wordpress.com/2016/10/04/selenium-3-is-coming/">we’ve said before&lt;/a>, for users of the WebDriver APIs this is a drop-in replacement. You’ll find that modern browsers, such as &lt;a href="https://chromedriver.chromium.org/downloads">Chrome&lt;/a> and &lt;a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">Edge&lt;/a> will continue to work just as before, and we’ve taken the opportunity to fix some bugs and improve stability. Selenium Grid users may require updates to their configuration as the json config file format has been updated, as have some of command line parameter options, but the upgrade should also be smooth.&lt;/p>
&lt;p>The major change in Selenium 3.0 is we’re removing the original Selenium Core implementation and replacing it with one backed by WebDriver. This will affect all users of the &lt;a href="http://seleniumhq.github.io/selenium/docs/api/java/com/thoughtworks/selenium/Selenium.html">Selenium RC&lt;/a> APIs. For more information, please see the &lt;a href="https://seleniumhq.wordpress.com/2016/10/04/selenium-3-is-coming/">previous post&lt;/a>.&lt;/p>
&lt;p>A lot has changed in the 5 years between versions 2 and 3. When we &lt;a href="https://seleniumhq.wordpress.com/2011/07/08/selenium-2-0/">shipped Selenium 2&lt;/a>, the Selenium project was responsible for providing the driver for each browser. Now, we are happy to say that all the major browser vendors ship their own implementations (&lt;a href="https://webkit.org/blog/6900/webdriver-support-in-safari-10/">Apple&lt;/a>, &lt;a href="https://chromedriver.chromium.org/">Google&lt;/a>, &lt;a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">Microsoft&lt;/a>, and &lt;a href="https://github.com/mozilla/geckodriver/releases">Mozilla&lt;/a>). Because the browser vendors know their browsers better than anyone, their WebDriver implementations can be tightly coupled to the browser, leading to a better testing experience for you.&lt;/p>
&lt;p>The other notable change has been that there is now a &lt;a href="https://www.w3.org/TR/webdriver/">W3C specification&lt;/a> for browser automation, based on the Open Source WebDriver. This has yet to reach “recommendation” status, but the people working on it (including members of the Selenium project!) are now focusing on finishing the text and writing the implementations.&lt;/p>
&lt;p>Mozilla has been a front-runner in implementing the W3C WebDriver protocol. On the plus side, this has exposed problems with the spec as it has evolved, but it also means that Firefox support is hard to track as their engineering efforts have been forward looking, rather than on supporting the current wire protocol used by Selenium WebDriver. For now, the best advice we can offer is for you to try the latest release of &lt;a href="https://github.com/mozilla/geckodriver/releases">geckodriver&lt;/a> and Selenium together.&lt;/p>
&lt;p>These are exciting times for browser automation! Selenium 3.0 is a major release and we’re looking forward to improving things further, as well as tracking the ongoing work of the W3C spec. Our goal is to keep the changes your tests need to deal with to an absolute minimum, to continue preserving the hard work that’s gone into writing your existing tests.&lt;/p>
&lt;p>As a personal note, I’d like to say thank you to each of the many people that have worked so hard to make Selenium 3 possible. That’s not just the developers and contributors to the Open Source project (past and present), but also the engineers from Google, Microsoft, Mozilla, and Apple, and everyone involved with the W3C spec. I’d also like to say thank you to everyone who’s taken the time to report bugs, our users and our community. The project is great fun to work on and you’re the reason for that. A final thank you is due to the Software Freedom Conservancy, who have provided invaluable help with the logistics of running a large OSS project.&lt;/p>
&lt;p>Happy hacking, everyone! May your tests run fast and true!&lt;/p></description></item><item><title>Blog: Selenium 3 is Coming</title><link>/blog/2016/selenium-3-is-coming/</link><pubDate>Tue, 04 Oct 2016 00:00:00 +0000</pubDate><guid>/blog/2016/selenium-3-is-coming/</guid><description>
&lt;p>&lt;a href="http://www.seleniumhq.org/download/">Selenium 3&lt;/a> is coming! As I write this, we think that “beta 4” will be the last beta before the official 3.0 release. I’m here to tell you about what’s changed, and what impact this will have on your testing.&lt;/p>
&lt;h3 id="tldr">TL;DR:&lt;/h3>
&lt;ul>
&lt;li>WebDriver users will just find bug fixes and a drop-in replacement for 2.x.&lt;/li>
&lt;li>Selenium Grid users will also find bug fixes and a simple update.&lt;/li>
&lt;li>The WebDriver APIs are now the only APIs actively supported by the Selenium project.&lt;/li>
&lt;li>The Selenium RC APIs have been moved to a “legacy” package.&lt;/li>
&lt;li>The original code powering Selenium RC has been replaced with something backed by WebDriver, which is also contained in the “legacy” package.&lt;/li>
&lt;li>By a quirk of timing, Mozilla have made changes to Firefox that mean that from Firefox 48 you must use their geckodriver to use that browser, regardless of whether you’re using Selenium 2 or 3.&lt;/li>
&lt;/ul>
&lt;h3 id="in-more-depth">In more depth:&lt;/h3>
&lt;p>When we &lt;a href="https://seleniumhq.wordpress.com/2011/07/08/selenium-2-0/">released Selenium 2.0&lt;/a> in 2011, we introduced the new WebDriver APIs, and encouraged everyone to start moving to them. If you’re using the WebDriver APIs, then Selenium 3.0 is a simple drop-in upgrade. We’ve not changed any of the public WebDriver APIs, and the code is essentially the same as the last 2.x release. If you’re using Selenium Grid, the same applies: in most cases, you can just drop in the new JAR (or update your maven dependency to 3.0.0), and you’re done.&lt;/p>
&lt;p>If the update to Selenium 3 is such a non-event, why did we call this Selenium 3.0? To answer this question, I first need to provide some history, and tell you a little about how Selenium works under the hood. The very first version of Selenium was “just” a very complicated Javascript framework, running in the browser and interpreting the table-based tests you may be familiar with if you use Selenium IDE. We call this “Selenium Core”. This Javascript framework formed the basis of the original implementation of Selenium RC (the oldest set of Selenium APIs, where all the method and functions were on the “&lt;a href="http://seleniumhq.github.io/selenium/docs/api/java/com/thoughtworks/selenium/Selenium.html">Selenium&lt;/a>” interface, and which have been deprecated for some time now). Over time, the needs of modern web testing have grown ever more complicated and sophisticated, and Selenium Core is now less capable of meeting these needs than it was before.&lt;/p>
&lt;p>With Selenium 3.0, we are deleting the original Selenium Core implementation. If you use the old RC interfaces, we provide an alternative implementation that’s backed by WebDriver. This is the same “webdriver-backed selenium” that has been available as part of Selenium 2 since its release. Because the underlying technology has changed from Selenium Core to WebDriver, you may find some places where your existing tests using RC run into issues. Our experience with migrating suites is that it’s normally a systemic issue that can be fixed with a minimal engineering effort (that is, the problem is normally isolated to a few places, and these can be rewritten to avoid problems)&lt;/p>
&lt;p>We’re also removing the original Selenium RC APIs from the main downloads. If you’re a Java user, and need to use them to support existing tests, then you’ll need a dependency to “org.seleniumhq.selenium:selenium-leg-rc:3.0.0” (or later!). It’s strongly recommended that you do not do this unless you absolutely need to.&lt;br>
If you’re someone who runs tests exported from IDE in the table format, there is now a new test runner that the project has made available for you to use that can be &lt;a href="http://www.seleniumhq.org/download/">downloaded&lt;/a> from the project’s website. It takes the same arguments as the old runner, and we’ve done our best to ensure the output of tests remains the same too.&lt;/p>
&lt;p>At the same time as the Selenium project is shipping Selenium 3.0, Mozilla are changing the internals of Firefox in a way that makes it more stable and secure, but which also makes the community provided Firefox Driver no longer work. As such, if you use Firefox for your testing, you’ll need to use the &lt;a href="https://github.com/mozilla/geckodriver/releases">geckodriver&lt;/a>, which is an executable similar to the &lt;a href="https://chromedriver.chromium.org/">chromedriver&lt;/a> and the &lt;a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">Microsoft WebDriver&lt;/a> for Edge. You’ll need to start using geckodriver even if you’re using Selenium 2 — the change is in the browser, not Selenium. Please be aware that geckodriver is alpha software, based on the evolving W3C WebDriver standard: everyone’s working flat out to give you the best testing experience they can, but there are undoubtedly some bumps in the road when it comes to testing with Firefox.&lt;/p>
&lt;p>This release marks the culmination of a lot of hard work by the Selenium committers and community. I’d like to thank everyone who has been part of this process, and the Selenium users around the world who have done so much to make the project as successful as it is.&lt;/p></description></item><item><title>Blog: Announcing Selenium 3.0-beta1</title><link>/blog/2016/announcing-selenium-3-0-beta1/</link><pubDate>Fri, 29 Jul 2016 00:00:00 +0000</pubDate><guid>/blog/2016/announcing-selenium-3-0-beta1/</guid><description>
&lt;p>At SeleniumConf in 2013, we announced that a new major version of Selenium would be released “by Christmas”. Fortunately, we never said which Christmas, as it has taken us a while to make all the changes we wanted to make! We’re excited to announce the release of the first beta — Selenium 3.0.0-beta1.&lt;/p>
&lt;p>We’d love you to try it out on your projects, and provide us with feedback on where the rough edges are before we ship the 3.0 itself! Please remember that this is a beta release, so your feedback is incredibly helpful and valuable in order to help us smooth any rough edges.&lt;/p>
&lt;p>For the last six years we’ve been advising users to switch to the newer WebDriver APIs and to stop using the original RC APIs. With Selenium 3.0, the original implementation of RC has been removed, replaced by one that sits on top of WebDriver. For many users, this change will go completely unnoticed, as they’re no longer using the RC APIs. For those of you who still are, we’ve done our best to make the change as smooth as possible, but &lt;a href="https://github.com/seleniumhq/selenium/issues">we welcome high quality bug reports&lt;/a> to help us fix any problems that occur. Maven users will need to add a dependency on the new “&lt;a href="http://docs.seleniumhq.org/download/maven.jsp">leg-rc&lt;/a>” package to access the old RC APIs.&lt;/p>
&lt;p>There are some other changes that you might need to be aware of:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>You’ll need to be running Java 8&lt;/strong> to use the Java pieces of Selenium. This is the oldest version of Java officially supported by Oracle, so hopefully you’re using it already!&lt;/li>
&lt;li>Support for Firefox is via Mozilla’s &lt;a href="https://github.com/mozilla/geckodriver/releases">geckodriver&lt;/a>.&lt;/li>
&lt;li>Support for Safari is provided on macOS (Sierra or later) via Apple’s own &lt;a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html">safaridriver&lt;/a>.&lt;/li>
&lt;li>Support for Edge is provided by MS through their &lt;a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">webdriver server&lt;/a>.&lt;/li>
&lt;li>Only versions 9 or above of IE are supported. Earlier versions may work, but are no longer supported as &lt;a href="https://www.microsoft.com/en-gb/WindowsForBusiness/End-of-IE-support">MS no longer supports them&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>We’ll be posting more information about Selenium 3.0 to this blog soon, but until then if you’re interested in learning more then &lt;a href="https://www.youtube.com/watch?v=bistojJPR98">a recent webinar by Simon&lt;/a> is a great place to start.&lt;/p></description></item><item><title>Blog: Fall Selenium Conf, Save the Date &amp; Call for Speakers!</title><link>/blog/2016/fall-selenium-conf-save-the-date/</link><pubDate>Thu, 23 Jun 2016 00:00:00 +0000</pubDate><guid>/blog/2016/fall-selenium-conf-save-the-date/</guid><description>
&lt;p>We’re excited to announce that we’ve finally determined where and when Selenium Conf will be happening this Fall.&lt;/p>
&lt;p>Our initial goal was to bring the event to a new country, but for a number of reasons that proved more challenging than we’d hoped. But in 2012 we had the 2nd annual Selenium Conf in London, and we’re pleased to be bringing it back there this year!&lt;/p>
&lt;p>The conference will be held at The Mermaid in downtown London on November 14-16:&lt;/p>
&lt;ul>
&lt;li>The 14th will be all-day pre-conference workshops&lt;/li>
&lt;li>The 15th-16th will be the conference&lt;/li>
&lt;/ul>
&lt;p>Go &lt;a href="http://seleniumconf.co.uk/">here&lt;/a> to sign up for the email list for conference updates (e.g., when tickets go on sale) as well as submit a talk. Call for speakers are open from now until July 29th.&lt;/p></description></item><item><title>Blog: Selenium Conf India 2016 Update</title><link>/blog/2016/selenium-conf-india-2016-update/</link><pubDate>Mon, 08 Feb 2016 00:00:00 +0000</pubDate><guid>/blog/2016/selenium-conf-india-2016-update/</guid><description>
&lt;p>Selenium Conf India is happening this June 24-26 in Bangalore, India.&lt;/p>
&lt;p>Tickets, call for speakers, and sponsorship slots are now available!&lt;/p>
&lt;p>&lt;a href="http://2016.seleniumconf.in/">http://2016.seleniumconf.in/&lt;/a>&lt;/p></description></item><item><title>Blog: Selenium Conf India — Save The Date!</title><link>/blog/2015/selenium-conf-india-save-the-date/</link><pubDate>Mon, 21 Dec 2015 00:00:00 +0000</pubDate><guid>/blog/2015/selenium-conf-india-save-the-date/</guid><description>
&lt;p>In &lt;a href="http://year-2015.seleniumconf.org/next-year/">our last update&lt;/a> we mentioned there will be 2 Selenium Confs in 2016 — one in India, another somewhere else (TBD).&lt;/p>
&lt;p>Well, &lt;strong>we are pleased to announce the official dates and location for Selenium Conf India!&lt;/strong>&lt;/p>
&lt;p>When: June 24th &amp;amp; 25th, 2016&lt;/p>
&lt;p>Where: Bangalore, India (at &lt;a href="http://www.chancerypavilion.com/">The Chancery Pavilion Hotel&lt;/a>)&lt;/p>
&lt;p>Mark you calendars! We’ll have more details as they become available (e.g., call for speakers, ticket sales, etc.). To get the latest updates, be sure to &lt;a href="http://eepurl.com/bEGBvX">sign up for the Selenium Conf mailing list&lt;/a>.&lt;/p></description></item><item><title>Blog: Selenium Conf 2016</title><link>/blog/2015/selenium-conf-2016/</link><pubDate>Fri, 06 Nov 2015 00:00:00 +0000</pubDate><guid>/blog/2015/selenium-conf-2016/</guid><description>
&lt;p>Interested in learning what’s in store for Se Conf 2016? Then be sure to read &lt;a href="http://year-2015.seleniumconf.org/next-year/">this write-up from the Conference Organizers&lt;/a>.&lt;/p>
&lt;p>Also, if you want to receive email notifications about the conference (e.g., when and where it will be, call for speakers, ticket sales, etc.) then go &lt;a href="http://eepurl.com/bEGBvX">here&lt;/a> and complete the sign-up form.&lt;/p></description></item><item><title>Blog: Selenium Conf 2015 Update</title><link>/blog/2015/selenium-conf-2015-update/</link><pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate><guid>/blog/2015/selenium-conf-2015-update/</guid><description>
&lt;p>Selenium 2015 is just around the corner (September 8-10). Since &lt;a href="/blog/2015/selenium-conf-2015-details/">our last post&lt;/a> we have:&lt;/p>
&lt;ul>
&lt;li>confirmed Keynote speakers&lt;/li>
&lt;li>finalized workshop presenters&lt;/li>
&lt;li>selected the talks for the conference&lt;/li>
&lt;/ul>
&lt;p>You can see keynote &amp;amp; workshop info &lt;a href="http://year-2015.seleniumconf.org/">here&lt;/a>, and the selected talks &lt;a href="http://confengine.com/selenium-conf-2015/proposals">here&lt;/a>.&lt;/p>
&lt;p>&lt;strong>If you still need a ticket, the last block of tickets are on sale NOW&lt;/strong>.&lt;/p>
&lt;p>If you want to attend the conference then register ASAP. Tickets will go quick and once they’re gone, they’re gone. To register go &lt;a href="http://www.eventbrite.com/e/selenium-conference-2015-tickets-17163911722">here&lt;/a> and purchase either a &lt;em>Last Call&lt;/em> or &lt;em>Last Call + Workshop&lt;/em> ticket.&lt;/p></description></item><item><title>Blog: Selenium Conf 2015 Details</title><link>/blog/2015/selenium-conf-2015-details/</link><pubDate>Thu, 11 Jun 2015 00:00:00 +0000</pubDate><guid>/blog/2015/selenium-conf-2015-details/</guid><description>
&lt;p>&lt;a href="http://seleniumconf.org">The Selenium Conf 2015 website&lt;/a> is live!&lt;/p>
&lt;p>You can now:&lt;/p>
&lt;p>– purchase tickets (while supplies last)&lt;/p>
&lt;p>– find out venue information&lt;/p>
&lt;p>– submit a talk&lt;/p>
&lt;p>– learn more about our talk selection process (tl;dr it is a blind review process to encourage diversity)&lt;/p>
&lt;p>What are you waiting for? Go to &lt;a href="http://seleniumconf.org">the conference website&lt;/a> already!&lt;/p></description></item><item><title>Blog: Selenium Conf 2015 – Save The Date</title><link>/blog/2015/selenium-conf-2015-save-the-date/</link><pubDate>Wed, 13 May 2015 00:00:00 +0000</pubDate><guid>/blog/2015/selenium-conf-2015-save-the-date/</guid><description>
&lt;p>Selenium Conf is coming to Portland, Oregon this year!&lt;/p>
&lt;p>It will be happening on September 8, 9, and 10. Mark your calendars.&lt;/p>
&lt;p>Stay tuned for details!&lt;/p></description></item><item><title>Blog: Announcing Selenium Conf ’14: Bangalore, India</title><link>/blog/2014/announcing-selenium-conf-14-bangalore-india/</link><pubDate>Mon, 24 Feb 2014 00:00:00 +0000</pubDate><guid>/blog/2014/announcing-selenium-conf-14-bangalore-india/</guid><description>
&lt;p>It makes me enormously happy and proud to announce that the Selenium Conference 2014 will be held in Bangalore on the 4-6 September. I’m looking forward to seeing you there!&lt;/p>
&lt;p>One of the plans we’ve had from the very beginning for SeConf was that it was going to be a conference for the community of people who make Selenium such a fun project to work on. One way to do this was to host the conference where the largest groups of people using Selenium are found. We kicked off the first conference in San Francisco mainly because of the large number of Selenium users there (and, I’ll be honest, because that’s where the organising team had the most experience and contacts!)&lt;/p>
&lt;p>In Europe, that large pool was London, so we held the second conference there. We had originally planned for the third conference to be in New York, but that proved to be a little too expensive, so we moved it North a little to Boston. Essentially, the pattern is that we alternate between the US one year and The Rest of the World the other.&lt;/p>
&lt;p>That brings us to the planning for Selenium Conference this year. We had a look at the data available to us, and noticed that there were two areas of the world that it would be great to take the conference to. &lt;a href="http://seleniumcamp.com/">Selenium Camp&lt;/a>, hosted in Kiev each year, does a great job of catering to one of these groups, so that leaves the second.&lt;/p>
&lt;p>It’s India’s turn. 🙂&lt;/p>
&lt;p>Thank you to everyone who’s already poured so much heart and spirit into this conference. We’ll be putting up a call for papers and more details soon, so please stay tuned!&lt;/p></description></item><item><title>Blog: Android and iOS Support</title><link>/blog/2013/android-and-ios-support/</link><pubDate>Tue, 24 Dec 2013 00:00:00 +0000</pubDate><guid>/blog/2013/android-and-ios-support/</guid><description>
&lt;p>TL;DR: We’re retiring Selenium’s own AndroidDriver and iPhoneDriver in favour of any of &lt;a href="http://selendroid.io/">Selendroid&lt;/a>, &lt;a href="http://ios-driver.github.io/ios-driver/">iosdriver&lt;/a> and &lt;a href="http://appium.io/">Appium&lt;/a>. If you’re using one of Selenium’s own mobile drivers, please evaluate one of these alternatives.&lt;/p>
&lt;p>The longer version:&lt;/p>
&lt;p>In 2007, Steve Jobs &lt;a href="http://www.apple.com/pr/library/2007/01/09Apple-Reinvents-the-Phone-with-iPhone.html">announced the iPhone&lt;/a> and changed the mobile Web from a curiosity to something the mainstream wanted and used. Current trends suggest that mobile Web usage will surpass desktop usage in the not too distant future. Which is a long way of saying the mobile Web is going to be a big part of the future of your sites and that it’d be an extremely wise idea to test them on mobile devices.&lt;/p>
&lt;p>The Selenium project responded to the rise of the mobile web by working to produce WebDriver implementations for both iOS and Android. The first lines of the iPhoneDriver (which also worked on the iPad) were added to the project early in 2009. The AndroidDriver was added in June 2010, and was primarily developed by engineers at Google. To this day you can download the official Android SDK and find “&lt;a href="http://android-developers.blogspot.com/2011/10/introducing-android-webdriver.html">Google WebDriver&lt;/a>” as one of the optional extras you can download.&lt;/p>
&lt;p>After the initial work on the mobile drivers, something interesting happened. Experimental extensions and modifications to the drivers were made outside of the selenium project. The first one of these that I was involved with was “&lt;a href="https://code.google.com/p/nativedriver/">nativedriver&lt;/a>“. This took the novel approach of allowing users to interact with the native UI of the phone, be it Android or iOS, using the familiar WebDriver APIs. The first time I saw it, I thought it was madness, but the engineers working on it soon convinced me that it made sense. And guess what? They were right.&lt;/p>
&lt;p>Sadly, after proving the idea was viable and workable, the NativeDriver project ran out of steam, but it set the scene for three projects that have taken the idea and run with it to create remarkably capable pieces of mobile testing software: Selendroid, iosdriver and Appium. All three of these allow a tester familiar with the WebDriver APIs to test mobile apps on iOS and Android. Not only native ones, but also hybrid or pure web-based ones too. They’ve recently been joined by the &lt;a href="http://winphonewebdriver.codeplex.com/">Windows Phone WebDriver&lt;/a>, which allows testing of mobile web apps on WinPhone 8.&lt;/p>
&lt;p>All of these projects have something in common: they’re far more active, more capable and have pushed further than the equivalent code in the main selenium project. In fact, some of the members of the selenium team that contributed to both AndroidDriver and iPhoneDriver are now also working on those other projects. There’s &lt;a href="http://sauceio.com/index.php/2013/09/the-mobile-json-wire-protocol-workshop/">work being done&lt;/a> to &lt;a href="https://code.google.com/p/selenium/source/browse?repo=mobile">maintain interoperability&lt;/a> between the different drivers, allowing users to chose which framework is most appropriate for their needs without fear of their tests needing major rework.&lt;/p>
&lt;p>This means that keeping the existing Android and iPhone drivers within the Selenium project isn’t helping our users. The alternatives are better, and keeping “official” drivers within the project muddies the water. Worse, the selenium developers are slow at making fixes to those drivers, which is incredibly frustrating for everyone involved. Because of this, the Selenium project has deleted the code for those drivers from its repository and we recommend you evaluate and use one of the alternatives.&lt;/p>
&lt;p>Of course, the code will still live in our repo’s history, so if you’d like to build them yourself, then it’s still possible. The last version with the iPhoneDriver is &lt;a href="https://code.google.com/p/selenium/source/detail?r=ef9d5787e5e136ecb4a31b0cf53a1fd17e252cf3">ef9d578&lt;/a>, and the last one with the Android source is &lt;a href="https://code.google.com/p/selenium/source/detail?r=00a3c7df9fb4109e1f99b5f7bee5f5df74fb876a">00a3c7d&lt;/a>. We’ve uploaded a version of the AndroidDriver built from that revision to the downloads page to save you having to do so yourself.&lt;/p>
&lt;p>These changes do not mean that we don’t support mobile as a project. It just means that we support the best implementations of mobile WebDriver, and those aren’t written as part of the Selenium project.&lt;/p></description></item><item><title>Blog: Mobile WebDriver</title><link>/blog/2013/mobile-webdriver/</link><pubDate>Wed, 28 Aug 2013 00:00:00 +0000</pubDate><guid>/blog/2013/mobile-webdriver/</guid><description>
&lt;p>Although the WebDriver APIs started life as just a mechanism for automating web browsers, over the past few years it has been extended to also work on mobile devices. Projects such as Appium, iosdriver, and Selendroid have all shown that this approach works, and works well. On the Web, if you start using Selenium WebDriver with one browser (Firefox, for example), it’s easy to switch out the browser for another one (such as Internet Explorer or Chrome). It’d be nice to have a similar option for mobile, switching from one automation framework for Android to another.&lt;/p>
&lt;p>As part of the Selenium 3 work, we have started working on a test suite to help ensure this level of interop between &lt;a href="http://appium.io/">appium&lt;/a> and &lt;a href="http://ios-driver.github.io/ios-driver/">iosdriver&lt;/a>, and appium and &lt;a href="http://selendroid.io/">selendroid&lt;/a>. To kick start the process, the primary authors of each of those tools, as well as others including David Burns representing the &lt;a href="https://developer.mozilla.org/en-US/docs/Marionette">Marionette&lt;/a> project (Mozilla’s implementation of WebDriver for Firefox and Firefox OS) and Simon Stewart, the lead of the &lt;a href="http://seleniumhq.org/">Selenium&lt;/a> project, have spent the past two days locked in a small room in Mozilla HQ, London. They’ve taken this time to work out the areas where each of their projects didn’t align and agreed on a way to ensure a level of interoperability. There was only a minimal quantity of blood and tears, but plenty of hard work.&lt;/p>
&lt;p>The &lt;a href="https://docs.google.com/document/d/1rnE13aGCaRiri01hti7j1jWDuPvQHT8aao4bHhEGz8Y/edit">agenda&lt;/a> for the past two days can be found here, and the &lt;a href="https://docs.google.com/document/d/1yXXsQo3z7lUVl3ZthAx39h4xBlF62x7q_NZd3NA9jnU/edit">minutes&lt;/a> are also available.&lt;/p>
&lt;p>As we speak, work has started on a shared test suite, hosted in a &lt;a href="https://code.google.com/p/selenium/source/checkout?repo=mobile">repo&lt;/a> in the selenium project’s Google Code page. Please, feel free to come along and join in!&lt;/p></description></item><item><title>Blog: The Road to Selenium 3</title><link>/blog/2013/the-road-to-selenium-3/</link><pubDate>Wed, 28 Aug 2013 00:00:00 +0000</pubDate><guid>/blog/2013/the-road-to-selenium-3/</guid><description>
&lt;p>Selenium 2 was &lt;a href="http://seleniumhq.wordpress.com/2011/07/08/selenium-2-0/">released in July 2011&lt;/a>. It’s now two years old, and what a couple of years it’s been! The WebDriver APIs, which were the major addition in Selenium 2, are now the basis for a &lt;a href="http://www.w3.org/TR/webdriver/">W3C standard&lt;/a>, and there are implementations written and supported by Google, Mozilla and Opera. There have been 34 releases, with official support for Java, C#, Python, Ruby and Javascript, and the community has stepped in to provide bindings for Perl, PHP and others. There have been 57 different people authoring changes in the code base, and countless more participating in the online forums, offering help and advice.&lt;/p>
&lt;p>While all this has been happening, the world has moved on, and now it’s time for the Selenium project to look to the future. It’s with great pleasure that I can now say that we’re working towards Selenium 3.&lt;/p>
&lt;p>We aim for Selenium 3 to be “a tool for user-focused automation of mobile and web apps”.&lt;/p>
&lt;p>What does this mean? For mobile users, the Selenium project will be hosting a suite of tests to facilitate interoperability between the many different projects available that are extending the WebDriver API to also cope with mobile. Developers from projects such as &lt;a href="http://appium.io/">Appium&lt;/a>, &lt;a href="http://ios-driver.github.io/ios-driver/">ios-driver&lt;/a> and &lt;a href="http://selendroid.io/">selendroid&lt;/a> will be working on the suite of tests to enable this.&lt;/p>
&lt;p>We’ll also be working on making the technology behind Selenium as stable and capable as possible. For this reason, Selenium 3 will see the removal of the original Selenium Core implementations, and consequently we’ll be deprecating the RC APIs too. The old versions will still be available as a separate download, but active development will cease, except for very urgent fixes. We will still be providing an implementation of the RC APIs backed by WebDriver, so you can continue running your existing tests, but now would be a great time to make the move to using the WebDriver APIs directly.&lt;/p>
&lt;p>For those of you exporting your tests from IDE and running the HTML suites, we’ll provide an alternative runner that allows you to continue running those tests too, though it’ll be backed by the same “WebDriver-backed” RC implementation as offered by the main download. Again, the original implementation will be available as a download, but it will no longer be actively developed once we release 3.0.&lt;/p>
&lt;p>Our current plan is to start shipping 3.0 by Christmas this year: it’s going to be a lot of fun!&lt;/p></description></item><item><title>Blog: Curious to know how we picked speakers for the 2013 SeConf? Read on…</title><link>/blog/2013/curious-to-know-how-we-picked-speakers-for-the-2013-seconf-read-on/</link><pubDate>Mon, 25 Mar 2013 00:00:00 +0000</pubDate><guid>/blog/2013/curious-to-know-how-we-picked-speakers-for-the-2013-seconf-read-on/</guid><description>
&lt;p>&lt;strong>This is a guest post by Marcus Merrell, one of the organizers of the 2013 &lt;a href="http://seleniumconf.org">Selenium Conference&lt;/a>.&lt;/strong>&lt;/p>
&lt;p>Selenium/Webdriver has kept my family fed since 2007. Since I’ve never committed a line of code to this magical project, I thought the least I could do was spend a few hours helping put SeConf 2013 together. When they asked for a volunteer to put the speaker program together, I was thrilled to step forward!&lt;/p>
&lt;p>Ultimately, I decided on a more conventional approach than straight-up dictatorship–and I can only credit the 5 awesome people on the committee and their ruthless adherence to the principle that “data wins”. I wanted a mix of hard-core browser techs, language-binding mavens, and people who ultimately made their living keeping a large variety of clients happy. And Simon–always Simon. I left myself out of the voting, because these are the experts’ experts: I figured the best thing I could do was ensure a smooth process and remove the burdens of book-keeping.&lt;/p>
&lt;p>Here they are, the People You Can Blame:&lt;/p>
&lt;p>– Dave Hunt, Mozilla&lt;br>
– Jim Evans, Salesforce.com&lt;br>
– Santiago Suarez-Ordoñez, Sauce Labs&lt;br>
– Jari Bakken, The Matrix&lt;br>
– Simon Stewart, Mt Olympus&lt;/p>
&lt;p>I don’t know if it was beginner’s luck, but there was zero drama. These folks are all pros, and we’ve put together a hell of a great conference for Boston.&lt;/p>
&lt;p>We had 24 slots to fill, but only ~45 submissions, and without the variety of topics we wanted. Specifically, we were dismayed by the low number of submissions from female presenters. Given a high proportion of female testers in the industry, we believed their voice was under-represented. The call was extended in part to attempt to correct this, and ended up netting us ~20 more submissions in total.&lt;/p>
&lt;p>With the proposals all gathered in one place (thanks, Ashley!), I then set about trying to find “themes” in the submissions. Several leapt out immediately–lots of case studies showed up from large household-name companies that I knew people would find interesting. Some deep-dives appeared, describing the inner workings of browser implementations or talking about a new tool-set people might find interesting.&lt;/p>
&lt;p>Another theme I saw, a blend of the previous two, were the Best Practices–people who wanted to talk about processes for applying disparate tool sets to the problems we face every day. I believe these talks have the broadest appeal, and are a primary driver of attendance. We also had enough mobile offerings to put together a “bloc”, which will consume a whole afternoon.&lt;/p>
&lt;p>Simon suggested “blind auditions” for the selection process, and everyone loved the idea. Voting would take place not knowing anything about the speaker outside of hints left in their abstract. Since we had extended the call to invite submissions from female presenters, we therefore believed this would “correct” for that bias. It should at least remove all doubt that any speaker was chosen specifically for their gender.&lt;/p>
&lt;p>I created a Google spreadsheet with a separate tab for each of these themes. Each tab contained only a few columns–the title, abstract, “notes to organizers” (if it was relevant), and one column for each person on the committee to vote. I did not include author bios, and if someone’s name showed up in anywhere else, I redacted it. I *did*, however, leave in speaker’s company. I figured if I saw two talks, “Success and Failure at Google” and, “Continuous Integration with Selenium at Bob’s House of HTML and Gumbo”, it would be completely reasonable to make the decision based on the company.&lt;/p>
&lt;p>My thinking was, rather than have each person go through each talk individually, all these folks would have to do is read a paragraph and assign a number 1-5 (1=want, 5=don’t want). That way they would rank the talks in terms of the best subjects for that particular theme, thereby making sure just about anyone would have a good “path” through the conference. The committee was given a short deadline (1 week!) to fill out the voting columns, after which we’d sync up on the phone.&lt;/p>
&lt;p>Somehow we managed to get people from California, Texas, Florida, the UK, and Norway into the same Google Hangout at the same time. We averaged the scores into a column in the spreadsheet, and Simon expertly sorted, manipulated, and color-coded the rows. As I said, we had 24 slots to fill, so Simon just drew a line: every talk in every theme that scored below a 2 was “in”. This left us with around 10 talks–we all agreed on two points: a) those talks were awesome, and b) we needed more.&lt;/p>
&lt;p>&lt;img src="https://mail.google.com/mail/u/0/images/cleardot.gif" alt="">So we cut in the talks with a score between 2 and 3. This put us up to 23 talks, so we had to begin some horse-trading. We started to have some difficult conversations when I realized that I had somehow not scored one talk at the bottom of one tab. I applied the formula to that cell, and it had one of the best scores of all–so we had 24! Huzzah!&lt;/p>
&lt;p>Where does this leave us? With &lt;a href="http://www.seleniumconf.org/speakers/">2 days of Track A and one day of Track B&lt;/a>. Given 8 presentations per track per day, that leaves us with an entire day of “open” talks for Track B. Be sure to sign up right when you get there–these slots went really fast last year, and will probably go fast again. We also will have a day of &lt;a href="http://www.seleniumconf.org/workshops/">workshops on four different topics&lt;/a>, with two in the morning and two in the afternoon.&lt;/p>
&lt;p>We’d like people’s feedback on how the conference “flows” this year. As I said, we wanted someone with just about any background and interest to be able to find a path through this conference, so I’d like to hear whether or not we achieved it.&lt;/p>
&lt;p>…and I hope to see you all in Boston! (&lt;a href="http://www.seleniumconf.org/tickets/">PS: Tickets are going fast!&lt;/a>).&lt;/p></description></item><item><title>Blog: Selenium Conf 2013: Call for Papers and Early Bird Tickets</title><link>/blog/2013/selenium-conf-2013-call-for-papers-and-early-bird-tickets/</link><pubDate>Tue, 22 Jan 2013 00:00:00 +0000</pubDate><guid>/blog/2013/selenium-conf-2013-call-for-papers-and-early-bird-tickets/</guid><description>
&lt;p>This year’s &lt;a href="http://www.seleniumconf.org/">Selenium Conference&lt;/a> is slated for June 10 – 12 in beautiful Boston, Massachusetts. The conference will be held at the &lt;a href="http://www.seleniumconf.org/venue/">Renaissance Boston Waterfront Hotel&lt;/a>. Similar to last year, this year’s conference will kick off with a full day of Selenium Workshops, followed by a two day, two track conference. If you’ve always dreamed of speaking at a Selenium Conference there’s still time to submit a talk to us at &lt;a href="http://www.seleniumconf.org/speakers/">http://www.seleniumconf.org/speakers/&lt;/a>.&lt;/p>
&lt;p>As we have done every year, we’re pleased to announce that a batch of early bird tickets to the Conference is on sale now, even before the talks have been finalized. You can get your ticket(s) by visiting &lt;a href="http://seconf2013.eventbrite.com/">http://seconf2013.eventbrite.com/&lt;/a>. There are only 45 early bird tickets available at the special rate of $299, and they are only available until February 4th, so act now! After that the regular price of $350 will be in effect for all tickets. You’ll also notice that tickets to our workshop day are for sale as well. These cost $75 and entitle you to attend a full day of Selenium workshops on Monday June 10th.&lt;/p>
&lt;p>More information on the conference is available at &lt;a href="http://www.seleniumconf.org/">http://www.seleniumconf.org/&lt;/a>, and we are still accepting speaker proposals. We’re looking forward to seeing you in June!&lt;/p></description></item><item><title>Blog: Announcing Selenium 2.26: the “It’s Really Real” Release</title><link>/blog/2012/announcing-selenium-2-26/</link><pubDate>Fri, 02 Nov 2012 00:00:00 +0000</pubDate><guid>/blog/2012/announcing-selenium-2-26/</guid><description>
&lt;p>It’s been a long time since we announced a new Selenium release on this blog, as we moved to a model of quicker releases, but we’ve been working on 2.26 for far longer than normal — it’s out! &lt;a href="http://seleniumhq.org/download/">Download&lt;/a> it now! — so I thought it best to let you know. We’re aiming to head back to faster releases, so hopefully you won’t see another blog post about the release for a while (though I’m sure they’ll appear in the “Smatterings of Selenium” posts)&lt;/p>
&lt;p>Some highlights that you might be interested in, include support for the latest and greatest versions of the popular browsers out there (including native events on Firefox 16!), the deletion of deprecated methods from the language bindings, better emulation of user input on IE when dealing with “&lt;a href="http://www.alistapart.com/articles/dropdowns">sucker fish&lt;/a>” style menus, and a slew of bug fixes. There’s more in the &lt;a href="https://code.google.com/p/selenium/source/browse/tags/selenium-2.26.0/java/CHANGELOG">changelog&lt;/a>!&lt;/p>
&lt;p>The inimitable &lt;a href="https://twitter.com/jimevansmusic">Jim Evans&lt;/a> held the Release Bacon for what has become one of our most challenging releases to do, so a big “thank you!” to him. A “thank you”, also, to the rest of the core developers and &lt;a href="https://saucelabs.com/">Sauce Labs&lt;/a> team members who worked on fixing so many bugs and getting our continuous build green, especially Alexei Barantsev who did some amazingly detailed and painstaking work to help the release through. And a final “thank you” to our users: thanks for your feedback and support. 🙂&lt;/p></description></item><item><title>Blog: Announcing Selenium 2.22</title><link>/blog/2012/announcing-selenium-2-22/</link><pubDate>Tue, 29 May 2012 00:00:00 +0000</pubDate><guid>/blog/2012/announcing-selenium-2-22/</guid><description>
&lt;p>It’s been a while since the last Selenium release, but I’m happy to announce that Selenium 2.22 is now &lt;a href="http://seleniumhq.org/download/">available for download&lt;/a>. This is a big release for us and features two major changes.&lt;/p>
&lt;p>The first is that &lt;strong>Selenium 2.22 is the first version that requires Java 6&lt;/strong> in order to run. This has been the case for the Selenium Server for some time, but this is the first time the client code has required Java 6. Since Java 5 was &lt;a href="http://www.oracle.com/technetwork/java/eol-135779.html">“end of lifed” in 2009&lt;/a>, we don’t expect this to impact many users.&lt;/p>
&lt;p>The second major change is that &lt;strong>we are now providing a standalone IE server for use with the WebDriver API&lt;/strong>, similar to the one used by the chrome driver. You can get it from the normal download page. This will allow us to update our IE support independently of the rest of the library (again, mirroring how Chrome is supported) For now, there’s a legacy fallback mode you can use that’ll use the same DLL we’ve always used which can be activated by setting the DesiredCapability “useLegacyInternalServer” to boolean “true” when requesting your IE Driver instance.&lt;/p>
&lt;p>Of course, as well as these major changes, there’s the usual host of updates and improvements. We’re continuing to refine the new SafariDriver, and we’re happy to announce native events for Firefox 12. You can check out the other updates in the &lt;a href="http://code.google.com/p/selenium/source/browse/trunk/java/CHANGELOG">CHANGELOG&lt;/a>.&lt;/p></description></item><item><title>Blog: Selenium Conf: Community</title><link>/blog/2012/selenium-conf-community/</link><pubDate>Tue, 27 Mar 2012 00:00:00 +0000</pubDate><guid>/blog/2012/selenium-conf-community/</guid><description>
&lt;p>In this series of blog posts we’ve introduced one of the keynotes and talked about some of the great presentations you’ll see at Selenium Conf ’12, but so far we’ve missed the most important aspect of the entire event: you.&lt;/p>
&lt;p>For me, one of the highlights of any conference is the chance to meet other members of the community, make new friends and talk about all things interesting (and perhaps even tangentially related to the conference!) To help this process along, we’ve avoided scheduling everything down to the last minute. Instead, we’ve left plenty of time in the B track for an unconference. You’ll get to pick the talks and have a chance to have your voice heard. Last year, there were some great talks on the equivalent track, and I think we’ll see the same this year too!&lt;/p>
&lt;p>If the idea of standing up and talking for 30 minutes in front of an audience seems a little daunting, you can dip your toes in the water by volunteering for a lightning talk: 5 minutes of concentrated goodness! Come prepared with a topic and perhaps a handful of slides 🙂&lt;/p>
&lt;p>It’s not all formal talks, either. As well as the many members of the selenium community who’ll be attending the conference, there will be many of the core development team. There’ll be a chance to ask Simon why we’re not using git yet, get feedback on some of the ways you’re using Selenium, or just chew the fat. There will be a drinks on the 17th at a London pub, too.&lt;/p>
&lt;p>I’m really looking forward to meeting all of you, and hearing the tall testing stories, and finding out how you’re pushing the boundaries. of web automation. If you’ve still not &lt;a href="http://www.seleniumconf.org/tickets/">bought a ticket&lt;/a>, there’s still time to. Come along and join us! If you’ve already bought your ticket, what kind of things are you looking forward to?&lt;/p></description></item><item><title>Blog: Selenium Conf: Speakers</title><link>/blog/2012/selenium-conf-speakers/</link><pubDate>Mon, 26 Mar 2012 00:00:00 +0000</pubDate><guid>/blog/2012/selenium-conf-speakers/</guid><description>
&lt;p>I may be biased, but I think &lt;a href="http://www.seleniumconf.org/">Selenium Conf ’12&lt;/a> is going to be great. There are talks aimed at every level of Selenium user. We’ve got &lt;a href="http://www.seleniumconf.org/speakers/#MD">experience&lt;/a> &lt;a href="http://www.seleniumconf.org/speakers/#NS">reports&lt;/a>, so you can learn from the trials and tribulations of others. There are talks about using Selenium in unusual ways, such as &lt;a href="http://www.seleniumconf.org/speakers/#MK">performance testing&lt;/a>, or &lt;a href="http://www.seleniumconf.org/speakers/#AP">automated security testing&lt;/a>, so you can see new ideas and approaches.&lt;/p>
&lt;p>There are technical talks, such as the one Jim Evans is giving on lessons learned from &lt;a href="http://www.seleniumconf.org/speakers/#JE">developing the IE driver&lt;/a>, so you can learn a little bit more about how Selenium works and &lt;a href="http://www.seleniumconf.org/speakers/#LD">Luke Daley’s talk&lt;/a> about &lt;a href="http://www.gebish.org/">Geb&lt;/a> is bound to be fun.&lt;/p>
&lt;p>If you’re a fan of &lt;a href="http://seleniumhq.org/projects/ide/">Selenium IDE&lt;/a>, then the &lt;a href="http://www.seleniumconf.org/speakers">talk on the SauceBuilder&lt;/a> will be a “must see”. We’ll also have the current owners of Selenium IDE attending the conference, so you’ll get a chance to pick their brains on the future of the tool.&lt;/p>
&lt;p>If you’re someone who enjoys living in the future, then the mobile focused talks, such as Andreas Tolf Tolfson’s talking about &lt;a href="http://www.seleniumconf.org/speakers#ATT">OperaDriver on mobile devices&lt;/a>, or Dante Briones talking about &lt;a href="http://www.seleniumconf.org/speakers#DB">testing mobile apps on iOS&lt;/a> will be interesting. And Jason Huggins will be talking about &lt;a href="http://www.seleniumconf.org/speakers#JH">robots&lt;/a>. What’s not to love?&lt;/p>
&lt;p>Better still, we’ve left space in the schedule in Track B for an unconference. If you put forward a talk this year that wasn’t accepted, or if you’ve got something you feel the Selenium community should hear, now’s your chance! If you’ve only got a little to say, or just want to make a single point, then you’re really going to enjoy the lightning talks!&lt;/p>
&lt;p>All of this is available for the &lt;a href="http://www.seleniumconf.org/tickets/">cost of the ticket&lt;/a>, which you can still buy. Don’t wait! Come to &lt;a href="https://twitter.com/#!/search/realtime/%23seconf">#SeConf&lt;/a>!&lt;/p></description></item><item><title>Blog: Selenium Conf Keynotes: Liz Keogh</title><link>/blog/2012/selenium-conf-keynotes-liz-keogh/</link><pubDate>Sun, 25 Mar 2012 00:00:00 +0000</pubDate><guid>/blog/2012/selenium-conf-keynotes-liz-keogh/</guid><description>
&lt;p>The tickets for &lt;a href="http://www.seleniumconf.org/">Selenium Conf ’12&lt;/a> are still on sale for about another week, so there’s still time for you to &lt;a href="http://www.seleniumconf.org/tickets/">buy your tickets&lt;/a>. In case you’ve not already gone to the &lt;a href="http://www.seleniumconf.org">conference site&lt;/a> to see the great line up, this week we’ll be letting you know what to expect!&lt;/p>
&lt;p>I’m really pleased to announce that &lt;a href="http://lunivore.com/">Liz Keogh&lt;/a>, who is a core member of the Behaviour Driven Development (BDD) community and is one of the stalwarts of the London Agile community, as well as a haiku poet, is going to be one of our keynotes! If you’ve ever seen &lt;a href="https://twitter.com/#!/lunivore">Liz&lt;/a> speak then you’ll know just how much a treat we’re in for. She’s got great things to say and always says them in a thoroughly engaging way.&lt;/p>
&lt;p>Liz’s keynote is titled “How to Test the Inside of Your Head”. When we test code and find it doesn’t do what we thought it did, we change it. But, she asks, wouldn’t it be great if we didn’t have to write the wrong code in the first place? In the talk, Liz will show how we can use examples and scenarios to break the models we make inside our own heads, helping us to avoid premature commitments and their follow-through – whether in code or in life.&lt;/p>
&lt;p>I’m really looking forward to it! I’m sure you are too.&lt;/p></description></item><item><title>Blog: Selenium Conference 2012</title><link>/blog/2012/selenium-conference-2012/</link><pubDate>Fri, 24 Feb 2012 00:00:00 +0000</pubDate><guid>/blog/2012/selenium-conference-2012/</guid><description>
&lt;p>Good news, everybody! &lt;a href="http://www.seleniumconf.org/">Selenium Conf ’12&lt;/a> is getting closer! We recently &lt;a href="http://www.seleniumconf.org/speakers/">selected the speakers&lt;/a> for the conference, and it’s going to be a great mix of talks, spanning the full range of subjects from the very practical to the deeply technical. I’m promised that there will be robots.&lt;/p>
&lt;p>Selenium Conf isn’t just about the planned talks, it’s also about the community. On the final day, there will be an unconference, so if there’s something you feel passionately about and feel the world should know, now’s your chance. You’ll not only have a chance to talk to and meet other selenium users, but also many of the core team members.&lt;/p>
&lt;p>The conference runs from the 16-18 April in London. &lt;a href="http://www.seleniumconf.org/tickets/">Tickets are still available&lt;/a>! We’re looking forward to seeing you there.&lt;/p></description></item><item><title>Blog: Support for Ancient Browsers</title><link>/blog/2012/support-for-ancient-browsers/</link><pubDate>Fri, 24 Feb 2012 00:00:00 +0000</pubDate><guid>/blog/2012/support-for-ancient-browsers/</guid><description>
&lt;p>The first code checked into the Selenium project’s public repository was in November, 2004. We’re now in 2012. In the intervening years there have been many browsers released. The last browser we officially stopped supporting was Firefox 2.0, and it’s time to review the list of browsers again.&lt;/p>
&lt;p>We periodically review the list of supported browsers as the more changes there are between the oldest version of a browser that we support and the most recent, the harder it is for us to add new features and maintain those that already exist. Balanced against the cost of maintaining the selenium code base itself are your tests; we know that your users might not be updating their browsers to the latest and greatest, and we know that you’ve still got to prove your app works on all the browsers that are important to you. That’s why what’s below is just our plan, and we’re talking about it now to let you have your say.&lt;/p>
&lt;p>Looking at the market share of the browsers out there helps us make an informed choice about what it makes sense to support. This will most likely mean:&lt;/p>
&lt;p>&lt;strong>Firefox&lt;/strong>: the Firefox market appears to be split between those on 3.6 and those on the new rapid release schedule. Given this, we are thinking of officially supporting Firefox 3.6, and the last, latest and next release of Firefox (currently Firefox 9-11) as well as any ESR releases. The market share for Firefox versions 3.0 and 3.5 is tiny, and the effort to keep them working with selenium is disproportionately high.&lt;/p>
&lt;p>&lt;strong>Internet Explorer&lt;/strong>: &lt;a href="http://www.ie6countdown.com/">Despite Microsoft’s efforts&lt;/a>, IE 6 is still a popular browser, particularly in the workplace. We will continue to support IE versions 6 and up.&lt;/p>
&lt;p>&lt;strong>Safari&lt;/strong>: Safari 3 is now ancient and has been superseded by newer releases. We plan on only supporting Safari 4 and 5.&lt;/p>
&lt;p>&lt;strong>iOS&lt;/strong>: We’ll continue to target the most recent iOS release.&lt;/p>
&lt;p>&lt;strong>Android&lt;/strong>: Due to some technical limitations in previous Android releases, we are targeting Ice Cream Sandwich and onwards. We will continue to make available the testing framework for Froyo, but will not be making any changes to it.&lt;/p>
&lt;p>&lt;strong>These are only our plans&lt;/strong>. If you really need those browsers, and (better!) can help us maintain support for them, then please let us know.&lt;/p>
&lt;p>You’ll notice that Opera and Chrome are not listed above. Since Opera and Google now maintain the drivers for those browsers, they are best placed to decide which are the supported versions, but in summary, Google support the major Chrome release channels (stable, beta, dev and canary) and Opera suggest using Opera 11.6+.&lt;/p></description></item><item><title>Blog: A Note About the Cybervillains SSL Certificate</title><link>/blog/2012/a-note-about-the-cybervillains-ssl-certificate/</link><pubDate>Wed, 08 Feb 2012 00:00:00 +0000</pubDate><guid>/blog/2012/a-note-about-the-cybervillains-ssl-certificate/</guid><description>
&lt;p>If you&amp;#8217;re using Selenium RC to test websites hosted on a secure site (accessed using a URL starting with HTTPS), we strongly recommend that you upgrade to Selenium 2.19. This is because the Cybervillains certificate in previous versions will expire soon, and has been replaced in 2.19 with an updated one.&lt;/p>
&lt;p>Our thanks to Patrick Lightbody, Ivan De Marino and Mark Watson and &lt;a href="http://www.neustar.biz/solutions/website-performance">Neustar&lt;/a> for taking providing the new certificate and the patch!&lt;/p></description></item><item><title>Blog: Announcing Selenium 2.19: the Prancing Unicorn release</title><link>/blog/2012/announcing-selenium-2-19-the-prancing-unicorn-release/</link><pubDate>Wed, 08 Feb 2012 00:00:00 +0000</pubDate><guid>/blog/2012/announcing-selenium-2-19-the-prancing-unicorn-release/</guid><description>
&lt;p>You might be pleased to hear that Selenium 2.19 has been released (&lt;a href="http://seleniumhq.org/download/">download it from here!&lt;/a>). There’s one big user facing changing that we’d like to tell you about: the webdriver-backed selenium can now be used in supported languages.&lt;/p>
&lt;p>By providing this capability, it’s possible to migrate from RC to the WebDriver APIs without rewriting all your tests in one fell swoop (which must be a Good Thing, right?) An example of how to use it in Python would be:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#000">driver&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">RemoteWebDriver&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">desired_capabilities&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">DesiredCapabilities&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">FIREFOX&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;span style="color:#000">selenium&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">DefaultSelenium&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;localhost&amp;#39;&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#0000cf;font-weight:bold">4444&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">*&lt;/span>&lt;span style="color:#000">webdriver&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;, &amp;#39;&lt;/span>&lt;span style="color:#000">http&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">//&lt;/span>&lt;span style="color:#000">www&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">google&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">com&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;)&lt;/span>
&lt;span style="color:#000">selenium&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">.&lt;/span>&lt;span style="color:#000">start&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">driver&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span> &lt;span style="color:#000">driver&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Provided you keep a reference to the original webdriver and selenium objects you created you can use the two APIs interchangeably. You’ll see that the magic is the “*webdriver” browser name passed to the selenium instance, and that we pass the webdriver instance when calling start().&lt;/p>
&lt;p>We hope you like it!&lt;/p>
&lt;p>PS: I have no idea why this is the Prancing Unicorn release, but it’s been a while since we named one 🙂&lt;/p></description></item><item><title>Blog: Selenium 2.16 Released: Welcome to 2012!</title><link>/blog/2012/selenium-2-16-released-welcome-to-2012/</link><pubDate>Thu, 05 Jan 2012 00:00:00 +0000</pubDate><guid>/blog/2012/selenium-2-16-released-welcome-to-2012/</guid><description>
&lt;p>It’s been a while since we last blogged about a Selenium release. Since the release of 2.0, we’ve been attempting to give you a fresh and shiny Selenium release every week (though, in reality, we’re managing to get you one every 10 days on average). This allows you to pick the version that’s most suitable for you and your teams, but provides a route for quick feedback on how we’re doing. I think we’ve now ironed out a lot of the initial problems and bumps we ran into, so we are extremely proud to announce the &lt;a href="http://seleniumhq.org/download/">release of Selenium 2.16&lt;/a>.&lt;/p>
&lt;p>If you’re unsure about what’s been happening since the last time we announced a release here, the best place to look is our &lt;a href="http://selenium.googlecode.com/svn/trunk/java/CHANGELOG">changelog&lt;/a>. The most notable feature in 2.16 is better support for Firefox 9, but if it’s been a while since you’ve last updated, we’ve been beavering away on bug fixes and making existing features work as flawlessly as possible. Now’s a great time to update!&lt;/p>
&lt;p>One of the key tools we use for assessing whether it’s okay to push a release is our continuous build. This watches for each and every change made to the project’s source code, and runs an increasingly vast suite of tests to verify that nothing has broken. Our friends at &lt;a href="http://saucelabs.com/">Sauce Labs&lt;/a> have been extremely generous in providing support for this, and have worked closely with us to make the build as stable and quick as possible. Special kudos and thanks to them!&lt;/p></description></item><item><title>Blog: Announcing Selenium Conf ’12</title><link>/blog/2011/announcing-selenium-conf-12/</link><pubDate>Fri, 09 Dec 2011 00:00:00 +0000</pubDate><guid>/blog/2011/announcing-selenium-conf-12/</guid><description>
&lt;p>The community around Selenium is the thing that really makes the Selenium project special. Last year, we held the first official Selenium Conference in San Francisco, and it was both great fun and a huge success. It is therefore with great pleasure that we are announcing &lt;a href="http://www.seleniumconf.org/">Selenium Conf ’12&lt;/a>! It’ll be taking place in &lt;strong>London&lt;/strong> from the &lt;strong>16th to the 18th April&lt;/strong>, and we’re really looking forward to seeing you all there!&lt;/p>
&lt;p>If you’ve been following &lt;a href="https://twitter.com/#!/seleniumconf">@seleniumconf&lt;/a> on Twitter, you probably already know that we have some &lt;a href="http://seconf2012.eventbrite.com/">early bird tickets&lt;/a> available and the &lt;a href="http://www.seleniumconf.org/speakers/">Call for Papers&lt;/a> is open. We’re looking for everything from lighting talks, through traditional presentations, to half-day long workshops on anything that uses Selenium in any way, including building on the Selenium WebDriver APIs (so talks about Watir would be welcome too!). It’ll be a chance to show off what you know and learn from the experts. If you get a quiet moment during the Christmas break, why not put &lt;a href="http://www.seleniumconf.org/speakers/">forward a talk&lt;/a>? If you’re not a talker, but can help us with &lt;a href="http://www.seleniumconf.org/sponsors/">sponsorship&lt;/a>, we’d love to hear from you too!&lt;/p>
&lt;p>Just as last year, the workshops will be happening on the first day of the conference, but places are limited. We plan on running a total of four workshops across two tracks, meaning each workshop is half a day long; a fantastic opportunity to take a deep dive into a particular area of the project. The early bird tickets give you access to them, as well as the conference itself on the 17th and 18th.&lt;/p>
&lt;p>The conference will consist of a main single track with selected speakers, with break out rooms being dedicated to an unconference, the contents of which will be decided by attendees. It’ll be your conference, help us make it brilliant 🙂&lt;/p></description></item><item><title>Blog: Selenium 2.9 Released</title><link>/blog/2011/selenium-2-9-released/</link><pubDate>Thu, 20 Oct 2011 00:00:00 +0000</pubDate><guid>/blog/2011/selenium-2-9-released/</guid><description>
&lt;p>We’re pleased to announce the release of &lt;a href="http://seleniumhq.org/download/">Selenium 2.9&lt;/a>. As well as improving the stability of Grid under high loads, we’ve added an experimental (and temporary!) feature that allows the Firefox driver to use a different mechanism for determining when a page is loaded. This is designed to handle the case where the driver appears to hang, as it’s waiting for all incoming requests to complete before continuing. How to enable this mode is listed in the &lt;a href="http://code.google.com/p/selenium/source/browse/trunk/java/CHANGELOG">changelog&lt;/a>.&lt;/p>
&lt;p>This release also includes an updated &lt;a href="http://code.google.com/p/selenium/downloads/detail?name=android-server-2.9.apk">Android driver&lt;/a>, allowing your tests to run on Ice Cream Sandwich devices.&lt;/p></description></item><item><title>Blog: Selenium 2.8 Released</title><link>/blog/2011/selenium-2-8-released/</link><pubDate>Thu, 06 Oct 2011 00:00:00 +0000</pubDate><guid>/blog/2011/selenium-2-8-released/</guid><description>
&lt;p>In keeping with our (roughly) weekly releases, Selenium 2.8 was &lt;a href="http://seleniumhq.org/download/">released today&lt;/a> (and on Maven too), &lt;a href="https://code.google.com/p/selenium/source/browse/trunk/java/CHANGELOG">with a *huge* list of bug-fixes&lt;/a>! As well as improved stability, if you’re using the Java API, this release adds the ability to upload files to a RemoteWebDriver server (see &lt;a href="http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/remote/RemoteWebDriver.html#setFileDetector(org.openqa.selenium.remote.FileDetector)">RemoteWebDriver.setFileDetector&lt;/a>).&lt;/p>
&lt;p>Particular thanks have to go out to our two newest committers, Alexei Barancev and Ajay Kemparaj, for the copious bug-fixes they’ve contributed!&lt;/p>
&lt;p>We’re already hard at work getting 2.9 ready for next week with even more more bug-fixes – watch this space!&lt;/p></description></item><item><title>Blog: Selenium 2.6 Released</title><link>/blog/2011/selenium-2-6-released/</link><pubDate>Fri, 16 Sep 2011 00:00:00 +0000</pubDate><guid>/blog/2011/selenium-2-6-released/</guid><description>
&lt;p>If you’ve been watching this blog carefully you’ll have noticed that the last release announcement we made was for 2.3, so it may come as a surprise that we’re announcing that &lt;a href="http://seleniumhq.org/download/">2.6 has been released&lt;/a> (even on Maven!). Don’t worry: 2.4 and 2.5 were released on time and without muss or fuss. 2.6, on the other hand has been almost three weeks brewing.&lt;/p>
&lt;p>Selenium 2.6 introduces a raft of improvements and stability fixes. Kristian Rosenvold has been working wonders on &lt;a href="http://code.google.com/p/selenium/wiki/Grid2">Grid 2.0&lt;/a>, addressing many reported issues and cleaning up the implementation. In the &lt;a href="http://code.google.com/p/selenium/issues/detail?id=14">finest tradition of the project&lt;/a>, I now &lt;a href="http://code.google.com/p/selenium/issues/detail?id=2475">owe him a dinner&lt;/a> for his hard work. Thank you, Kristian!&lt;/p>
&lt;p>For those of you not using Grid, as well as the normal suite of bug fixes, Selenium 2.6 now supports all versions of Firefox from 3.0 up to 7. For those of you using Java, there is an &lt;a href="http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/support/ui/ExpectedConditions.html">ExpectedConditions&lt;/a> class that supplies many useful criteria when using the &lt;a href="http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/support/ui/Wait.html">Wait&lt;/a> and &lt;a href="http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/support/ui/WebDriverWait.html">WebDriverWait&lt;/a> classes. The packaged version of the &lt;a href="http://www.opera.com/developer/tools/operadriver/">OperaDriver&lt;/a> has also been bumped to 0.7.2, which works hand-in-hand with Opera 11.5 and above.&lt;/p>
&lt;p>We’ve also spent a considerable amount of time and effort working out the kinks in the &lt;a href="http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/interactions/package-frame.html">Advanced User Interactions API&lt;/a>. We’d love to hear how you’re using it, and what the gaps are that you can see. For more details about what’s changed, have a look at the &lt;a href="http://code.google.com/p/selenium/source/browse/trunk/java/CHANGELOG">release notes&lt;/a>.&lt;/p>
&lt;p>The release frequency has dropped recently, but we’re planning to head back to weekly releases from here on in. 2.7 is just around the corner!&lt;/p></description></item><item><title>Blog: Selenium 2.3 Released</title><link>/blog/2011/selenium-2-3-released/</link><pubDate>Tue, 02 Aug 2011 00:00:00 +0000</pubDate><guid>/blog/2011/selenium-2-3-released/</guid><description>
&lt;p>Continuing our new tradition of weekly releases, we’re very pleased to announce the &lt;a href="http://seleniumhq.org/download/">release of Selenium 2.3&lt;/a>. The release notes for this version are pretty slim:&lt;/p>
&lt;ul>
&lt;li>Better detection of clickable areas in Firefox.&lt;/li>
&lt;li>Merge of Google-contributed code into the underlying javascript libraries used by the drivers.&lt;/li>
&lt;/ul>
&lt;p>We’ve also fixed bugs, one of which was being a nuisance for users of IBM’s JRE. The complete changelog can be found in the zipped downloads or in &lt;a href="http://selenium.googlecode.com/svn/trunk/java/CHANGELOG">our source tree&lt;/a>.&lt;/p>
&lt;p>If you’re a Chrome user, then it’s a great idea to head over to the &lt;a href="http://code.google.com/p/chromium/downloads/list">Chromium project’s download page&lt;/a> to pick up the executable used by the ChromeDriver. It’s recently been updated, and now includes support for handling alerts and prompts! Thanks, Google!&lt;/p></description></item><item><title>Blog: Selenium 2.2 Released</title><link>/blog/2011/selenium-2-2-released/</link><pubDate>Tue, 26 Jul 2011 00:00:00 +0000</pubDate><guid>/blog/2011/selenium-2-2-released/</guid><description>
&lt;p>The feedback from the last release was heard loud and clear: little and often it is!&lt;/p>
&lt;p>We’re proud to announce the release of &lt;a href="http://seleniumhq.org/download/">Selenium 2.2&lt;/a>. What’s new this time? For many users, this is simply a bug fix release as there are no new major features. One thing you might appreciate is &lt;a href="http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/IllegalLocatorException.html">better exceptions&lt;/a> being thrown when xpath searches return something other than a web element when using the WebDriver APIs, and we’re continuing to tweak the emulation of user events.&lt;/p>
&lt;p>If you’re a .Net user, there is now an official &lt;a href="http://nuget.org/List/Packages/Selenium.WebDriver">NuGet package&lt;/a>, and if you’re a maven user then rest assured the release is heading to the central repo as quickly as we can manage.&lt;/p></description></item><item><title>Blog: Selenium 2.1 Released</title><link>/blog/2011/selenium-2-1-released/</link><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid>/blog/2011/selenium-2-1-released/</guid><description>
&lt;p>Now that Selenium 2 has &lt;a href="http://seleniumhq.wordpress.com/2011/07/08/selenium-2-0/">been released&lt;/a>, one of the goals of the project is to provide regular updates to our users and the community. The aim is for these updates to be small and manageable, incrementally addressing issues and problems raised by you. Selenium 2.1, which is &lt;a href="http://seleniumhq.org/download/">launched today&lt;/a>, marks the first of these regular, small releases.&lt;/p>
&lt;p>&lt;a href="http://seleniumhq.org/download/">Selenium 2.1&lt;/a> is largely focused on improving Grid with a host of minor improvements including better tracking of “orphaned” browser instances. There are also some bug fixes in the Firefox and IE WebDrivers, particularly when dealing with elements that are &lt;em>just&lt;/em> off screen, and in making the Selenium RC emulation in the Java bindings more robust when confronted with pages that haven’t started loading.&lt;/p>
&lt;p>As you can see, this is a “bite size” release, but we’d love to know: would you prefer these small, swift releases or larger ones? Please answer in the comments, or on the &lt;a href="groups.google.com/group/selenium-users">mailing list&lt;/a>!&lt;/p></description></item><item><title>Blog: Selenium 2.0: Out Now!</title><link>/blog/2011/selenium-2-0/</link><pubDate>Fri, 08 Jul 2011 00:00:00 +0000</pubDate><guid>/blog/2011/selenium-2-0/</guid><description>
&lt;p>We are very, very pleased to announce the &lt;a href="http://seleniumhq.org/download/">release of Selenium 2.0&lt;/a>. If you’ve been waiting for a stable release since 1.0.3, now’s the chance to update. And if you do, what will you find?&lt;/p>
&lt;p>For users of Selenium 1, this is a drop-in replacement. You’ll find support for modern browsers such as &lt;a href="http://www.mozilla.com/en-US/firefox/new/">Firefox 5&lt;/a> and &lt;a href="http://windows.microsoft.com/en-GB/internet-explorer/products/ie/home">IE 9&lt;/a>, as well as a wealth of bug fixes and stability improvements. That’s one reason to update, but what other reasons are there?&lt;/p>
&lt;p>The big feature of this release — and the reason for the new version number — are the new WebDriver APIs for &lt;a href="http://pypi.python.org/pypi/selenium">Python&lt;/a>, &lt;a href="http://rubygems.org/gems/selenium-webdriver">Ruby&lt;/a>, &lt;a href="http://code.google.com/p/selenium/downloads/list">Java and C#&lt;/a>. These have been in development for over four years, and are already widely used, trusted and depended on. The WebDriver APIs have been written by developers familiar with each language, so they feel like they belong there. We’re very proud of them, and hope you enjoy using them.&lt;/p>
&lt;p>Support for WebDriver is also baked into &lt;a href="http://www.opera.com/">Opera&lt;/a> and &lt;a href="http://www.google.com/chrome">Chrome&lt;/a>, and we’re working closely with &lt;a href="http://www.mozilla.org/">Mozilla&lt;/a> to ensure that their browsers also support it. Looking to the future, WebDriver also works on both Android and iPhone, allowing you to test your sites on the next wave of the Web.&lt;/p>
&lt;p>As well as support by the browser vendors, WebDriver also provides excellent emulation of user inputs using something we call “native events”. Normal browser automation frameworks, including older versions of Selenium, simulate user interactions via the Javascript engine of the browser. This approach is error prone as each browser has its own quirks. “Native events” are fired at the OS level instead, avoiding a large amount of browser-specific complexity.&lt;/p>
&lt;p>Advanced Selenium users will be pleased to hear that the standalone selenium server also includes support for distributed testing via &lt;a href="http://code.google.com/p/selenium/wiki/Grid2">Selenium Grid&lt;/a>. This new Grid implementation supports testing using both the original Selenium API and WebDriver, and has been developed as a collaboration between the current Grid maintainer and an engineer from eBay.&lt;/p>
&lt;p>We’re working hard to ensure that Selenium IDE also supports all these new features and APIs. IDE version 1.1.0 should be released next week, with support for exporting to the four main languages supported by WebDriver. Please keep an eye on this blog for announcements! There will also be follow up posts, exploring and explaining each of the new features, and providing you with more information.&lt;/p>
&lt;p>Of course, Selenium 2.0 is a major milestone, but we’re not done yet. This release marks the point where we expect our APIs to change very little from now on and where we believe it’s a solid release. Like all software, it has niggles and bugs, and we’ll be focusing on addressing these as your feedback comes in.&lt;/p>
&lt;p>As a personal note, I’d like to say thank you to each of the many people that have worked so hard to make this the best Selenium version yet. Not only the developers but also the team working on making our &lt;a href="http://seleniumhq.org/docs/">documentation&lt;/a> clear and easy to read, everyone who’s taken the time to &lt;a href="http://code.google.com/p/selenium/issues/list">report bugs&lt;/a>, and also to you; our &lt;a href="https://groups.google.com/group/webdriver">users&lt;/a> and &lt;a href="https://groups.google.com/group/selenium-users">community&lt;/a>. The project is great fun to work on, and you’re the reason for that. Thank you!&lt;/p></description></item><item><title>Blog: Selenium IDE 1.0.12 – now with Firefox 5 support</title><link>/blog/2011/selenium-ide-1-0-12-firefox-5/</link><pubDate>Mon, 04 Jul 2011 00:00:00 +0000</pubDate><guid>/blog/2011/selenium-ide-1-0-12-firefox-5/</guid><description>
&lt;p>Last week we quietly released Selenium IDE 1.0.12 on the website. It has Firefox 5 support along with other improvements. See the &lt;a href="http://code.google.com/p/selenium/wiki/SeIDEReleaseNotes">release notes&lt;/a> and &lt;a href="http://blog.reallysimplethoughts.com/2011/06/23/selenium-ide-v1-0-12-is-now-here/">unofficial announcement&lt;/a>. Download it &lt;a href="http://seleniumhq.org/download/">here&lt;/a> or ask Firefox to check for plugins updates.&lt;/p>
&lt;p>And for those who did not download 1.0.11 (it was not pushed through the update system) you will want to &lt;a href="http://blog.reallysimplethoughts.com/2011/06/10/does-selenium-ide-v1-0-11-support-changing-formats/">read about the formatter change&lt;/a> that landed.&lt;/p></description></item><item><title>Blog: Selenium 2.0rc3: The “Next One’s The Big One” Release</title><link>/blog/2011/selenium-2-0rc3-the-next-ones-the-big-one-release/</link><pubDate>Mon, 27 Jun 2011 00:00:00 +0000</pubDate><guid>/blog/2011/selenium-2-0rc3-the-next-ones-the-big-one-release/</guid><description>
&lt;p>When we pushed the 2.0rc1 live, we really hoped that the next release would be 2.0 final. We very quickly got some feedback that encouraged us to push a 2.0rc2. Now, after just under three weeks, we’re launching a third and final release candidate. You can download it from the &lt;a href="http://seleniumhq.org/download/">Selenium HQ&lt;/a> site or directly from &lt;a href="http://code.google.com/p/selenium/downloads/list">Google Code.&lt;/a>&lt;/p>
&lt;p>We think we’ve addressed many of the common issues, added some polish and added a host of bug fixes and minor changes, and we hope to hear your feedback! The following headline changes have been made in Selenium 2rc3:&lt;/p>
&lt;ul>
&lt;li>The deprecated RenderedWebElement interface has now been removed. Most of the functionality has been moved to either &lt;a href="http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html">WebElement&lt;/a> or to the &lt;a href="http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/interactions/Actions.html">Actions&lt;/a> class.&lt;/li>
&lt;li>The deprecated WebElement.getValue() method has been removed. Use &lt;a href="http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#getAttribute(java.lang.String)">WebElement.getAttribute(“value”)&lt;/a> instead.&lt;/li>
&lt;li>After some debate in the team, “&lt;a href="http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#setSelected()">WebElement.setSelected&lt;/a>” and “&lt;a href="http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#toggle()">WebElement.toggle&lt;/a>” have been deprecated. They will be removed in the final release.&lt;/li>
&lt;li>Thanks to the hard work of Mozilla engineers, we now offer Firefox 5 support.&lt;/li>
&lt;li>The &lt;a href="http://www.opera.com/developer/tools/operadriver/">Opera driver&lt;/a>, developed by the lovely chaps at Opera Software, is bundled with this release.&lt;/li>
&lt;li>Improvements in the way that mouse interactions are simulated, particularly when elements are outside the visible area of the page.&lt;/li>
&lt;/ul>
&lt;p>As with almost all releases, there are still some issues left to resolve, but we’re working hard to make Selenium 2.0 as good as it can be.&lt;/p></description></item><item><title>Blog: Selenium 2.0rc2: The Better Working Release</title><link>/blog/2011/selenium-2-0rc2-the-better-working-release/</link><pubDate>Thu, 02 Jun 2011 00:00:00 +0000</pubDate><guid>/blog/2011/selenium-2-0rc2-the-better-working-release/</guid><description>
&lt;p>You win some and you lose some. We’d been really pleased to get Selenium 2.0rc1 out, so we were pretty disappointed to hear that some of you were running into problems with the Java version of the IE driver not launching IE sometimes. That’s definitely not good, so we fixed the problems and have &lt;a href="http://code.google.com/p/selenium/downloads/list">released Selenium 2.0rc2&lt;/a>. It’s the same as rc1, but with fewer problems 🙂&lt;/p>
&lt;p>We’re still very keen to hear your feedback! Let us know what you think!&lt;/p></description></item><item><title>Blog: Selenium 2.0rc1: The Grid Release</title><link>/blog/2011/selenium-2-0rc1-the-grid-release/</link><pubDate>Wed, 01 Jun 2011 00:00:00 +0000</pubDate><guid>/blog/2011/selenium-2-0rc1-the-grid-release/</guid><description>
&lt;p>We’re very happy to announce the first Release Candidate for Selenium 2, available for Java, C#, Ruby and Python. The API has been stabilised and the functionality needed for the final 2.0 release is mostly in. We’re going to be working hard to get there as soon as possible, but now’s the perfect time to test the waters and provide us with any feedback you may have! &lt;a href="http://code.google.com/p/selenium/downloads/list">Grab the downloads from the site&lt;/a>!&lt;/p>
&lt;p>Highlights:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://code.google.com/p/selenium/wiki/Grid2">Grid 2&lt;/a>: A major feature of this release is Grid 2, an implementation of the Selenium Grid that supports WebDriver’s wire protocol, allowing tests using Selenium WebDriver to be distributed through it. There are some &lt;a href="http://code.google.com/p/selenium/wiki/Grid2">docs to help you get started&lt;/a> on the wiki.&lt;/li>
&lt;li>New &lt;a href="http://code.google.com/p/selenium/wiki/ChromeDriver">ChromeDriver&lt;/a>: Following a complete rewrite of the ChromeDriver, Selenium 2 is now supported natively by the Chrome browser itself. In order to use this, you must download the &lt;a href="http://code.google.com/p/selenium/downloads/list">chromedriver executable&lt;/a> from the Selenium project site.&lt;/li>
&lt;li>&lt;a href="http://www.opera.com/developer/tools/operadriver/">OperaDriver&lt;/a> support: We’ve bundled the most excellent OperaDriver into the release to make it easy to get started testing with &lt;a href="http://www.opera.com/browser/">Opera&lt;/a>.&lt;/li>
&lt;li>Support for native events in Firefox 4.&lt;/li>
&lt;li>&lt;a href="http://code.google.com/p/selenium/wiki/AdvancedUserInteractions">Advanced User Interactions&lt;/a>: An API that allows you to model complex user interactions, such as clicking on an element, holding the shift key, clicking on three more, and then dragging the four elements to a final destination. The entry point to this API is the &lt;a href="http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/interactions/Actions.html">Actions&lt;/a> class.&lt;/li>
&lt;/ul>
&lt;p>We’ve also deleted all methods that were deprecated in 2.0b3 and have marked a number of methods and classes (notably &lt;a href="http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/RenderedWebElement.html">RenderedWebElement&lt;/a> and &lt;a href="http://selenium.googlecode.com/svn/trunk/docs/api/java/org/openqa/selenium/WebElement.html#getValue()">WebElement.getValue&lt;/a>) deprecated. These will be deleted in the next release.&lt;/p>
&lt;p>Known issues:&lt;/p>
&lt;ul>
&lt;li>Native events on Linux may not work properly on tests that include alerts and prompts.&lt;/li>
&lt;li>Mouse actions using the Advanced User Interactions API may not work properly for elements that have to be scrolled into view.&lt;/li>
&lt;/ul>
&lt;p>We plan on making our releases more frequent in the run up to 2.0final and polish off the bugs and issues. Stay tuned! This is going to be fun 🙂&lt;/p></description></item></channel></rss>