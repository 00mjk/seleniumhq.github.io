<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WebDriver on Documentação do Selenium</title><link>https://www.selenium.dev/documentation/pt-br/webdriver/</link><description>Recent content in WebDriver on Documentação do Selenium</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>2013-{year}</copyright><atom:link href="https://www.selenium.dev/documentation/pt-br/webdriver/index.xml" rel="self" type="application/rss+xml"/><item><title>Entendendo os componentes</title><link>https://www.selenium.dev/documentation/pt-br/webdriver/understanding_the_components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/pt-br/webdriver/understanding_the_components/</guid><description>Construir um conjunto de testes usando WebDriver exigirá que você entenda e use efetivamente uma série de componentes diferentes. Como com tudo em software, pessoas diferentes usam termos diferentes para a mesma ideia. Abaixo está uma análise de como os termos são usados nesta descrição.
Terminologia API: interface de programação de aplicativo. Este é o conjunto de &amp;ldquo;comandos&amp;rdquo; que você usa para manipular o WebDriver. Biblioteca: um módulo de código que contém as APIs e o código necessário para implementá-los.</description></item><item><title>Requerimentos do driver</title><link>https://www.selenium.dev/documentation/pt-br/webdriver/driver_requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/pt-br/webdriver/driver_requirements/</guid><description>Por meio do WebDriver, o Selenium oferece suporte a todos os principais navegadores do mercado como Chrom(ium), Firefox, Internet Explorer, Opera e Safari. Sempre que possível, o WebDriver dirige o navegador usando o suporte integrado do navegador para automação, embora nem todos os navegadores tenham suporte oficial para controle remoto.
O objetivo do WebDriver é emular a interação de um usuário real com o navegador o mais próximo possível. Isso é possível em vários níveis em diferentes navegadores.</description></item><item><title>Manipulação do Browser</title><link>https://www.selenium.dev/documentation/pt-br/webdriver/browser_manipulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/pt-br/webdriver/browser_manipulation/</guid><description>Ruby Ruby não está instalado por padrão no Windows. Baixe a versão mais recente e execute o instalador. Você podedeixar todas as configurações com os valores padrão, exceto na tela Installation Destination and Optional Tasks verifique onde você precisa marca a caixa de seleção Add Ruby executables to your PATH. Para utilizar qualquer navegador, você deve instalar a gem de Ruby selenium-webdriver. Para instalá-lo, abra o prompt de comando e digite isto:</description></item><item><title>WebDriver Bidi APIs</title><link>https://www.selenium.dev/documentation/pt-br/webdriver/bidi_apis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/pt-br/webdriver/bidi_apis/</guid><description>Page being translated from English to Portuguese. Do you speak Portuguese? Help us to translate it by sending us pull requests!
In Selenium 4, new Evented APIs were introduced that allow users to be able to capture events from the browser as they happen rather than using the traditional approach of Request/Response that WebDriver has used for other APIs.
Internally WebDriver will create a WebSocket connection to the browser for events and commands to be transmitted.</description></item><item><title>Esperas</title><link>https://www.selenium.dev/documentation/pt-br/webdriver/waits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/pt-br/webdriver/waits/</guid><description>Geralmente, pode-se dizer que o WebDriver tem uma API de blocante. Porque é uma biblioteca fora de processo que instrui ao navegador o que fazer, e porque a plataforma web tem uma natureza intrinsecamente assíncrona, O WebDriver não rastreia o estado ativo em tempo real do DOM. Isso traz alguns desafios que discutiremos aqui.
Por experiência, a maioria dos problemas intermitentes que surgem do uso de Selenium e WebDriver estão conectados a condições de corrida que ocorrem entre o navegador e as instruções do usuário.</description></item><item><title>Classes de suporte</title><link>https://www.selenium.dev/documentation/pt-br/webdriver/support_classes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/pt-br/webdriver/support_classes/</guid><description>As classes de suporte do WebDriver são fornecidas para simplificar a manutenção do seu código. Eles fornecem uma boa abstração para fazer a modelagem de elemento(s) HTML como objetos de domínio mais fáceis, também fornecendo métodos auxiliares para tornar o uso de tais objetos fácil de se pensar. Vamos aprender sobre:
Estratégias de localizador Eventos LoadableComponent ThreadGuard etc. Vamos começar:
ThreadGuard Esta classe está disponível apenas no Java Binding</description></item><item><title>Alertas, prompts e confirmações JavaScript</title><link>https://www.selenium.dev/documentation/pt-br/webdriver/js_alerts_prompts_and_confirmations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/pt-br/webdriver/js_alerts_prompts_and_confirmations/</guid><description>WebDriver fornece uma API para trabalhar com os três tipos nativos de mensagens pop-up oferecidas pelo JavaScript. Esses pop-ups são estilizados pelo navegador e oferecem personalização limitada.
Alertas O mais simples deles é referido como um alerta, que mostra um mensagem personalizada e um único botão que dispensa o alerta, rotulado na maioria dos navegadores como OK. Ele também pode ser dispensado na maioria dos navegadores pressionando o botão Fechar, mas isso sempre fará a mesma coisa que o botão OK.</description></item><item><title>Proxies Http</title><link>https://www.selenium.dev/documentation/pt-br/webdriver/http_proxies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/pt-br/webdriver/http_proxies/</guid><description>Um servidor proxy atua como intermediário para solicitações entre um cliente e um servidor. De forma simples, o tráfego flui através do servidor proxy a caminho do endereço que você solicitou e de volta.
Um servidor proxy para scripts de automação com Selenium pode ser útil para:
Capturar o tráfego da rede Simular chamadas de back-end feitas pelo site Acessar o site necessário em uma rede complexa topologias ou restrições / políticas corporativas estritas.</description></item><item><title>Estratégia de carregamento de página</title><link>https://www.selenium.dev/documentation/pt-br/webdriver/page_loading_strategy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/pt-br/webdriver/page_loading_strategy/</guid><description>Define a estratégia de carregamento de página da sessão atual. Por padrão, quando o Selenium WebDriver carrega uma página, segue a normal pageLoadStrategy. É sempre recomendado parar de baixar outros recursos (como imagens, css, js) quando o carregamento da página leva muito tempo.
A propriedade document.readyState de um documento descreve o estado de carregamento do documento atual. Por padrão, o WebDriver vai adiar a resposta a uma chamada para driver.get() (ou) driver.</description></item><item><title>Elemento Web</title><link>https://www.selenium.dev/documentation/pt-br/webdriver/web_element/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/pt-br/webdriver/web_element/</guid><description>WebElement representa um elemento DOM. WebElements podem ser encontrados pesquisando na raiz do documento usando uma instância do WebDriver ou pesquisando em outro WebElement.
WebDriver API fornece métodos integrados para encontrar WebElements que são baseados em diferentes propriedades, como ID, Nome, Classe, XPath, Seletores CSS, Texto do link, etc.
Encontrar elemento É usado para encontrar um elemento e retorna a primeira referência WebElement única correspondente, que pode ser usado para ações futuras do elemento</description></item><item><title>Teclado</title><link>https://www.selenium.dev/documentation/pt-br/webdriver/keyboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/pt-br/webdriver/keyboard/</guid><description>Keyboard representa um evento do teclado. As ações do teclado são executadas usando uma interface de baixo nível que nos permite fornecer entrada de dispositivo virtualizado para o navegador da web.
sendKeys O sendKeys digita uma sequência de teclas no elemento DOM, mesmo se uma sequência de teclas modificadoras for encontrada. Aqui está a lista de possíveis teclas que WebDriver suporta.
Java Python C# Ruby JavaScript Kotlin import org.openqa.selenium.By;
import org.</description></item></channel></rss>