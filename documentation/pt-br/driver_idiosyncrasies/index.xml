<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Idiossincrasias do driver on Documentação do Selenium</title><link>https://www.selenium.dev/documentation/pt-br/driver_idiosyncrasies/</link><description>Recent content in Idiossincrasias do driver on Documentação do Selenium</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>2013-{year}</copyright><atom:link href="https://www.selenium.dev/documentation/pt-br/driver_idiosyncrasies/index.xml" rel="self" type="application/rss+xml"/><item><title>Recursos compartilhados</title><link>https://www.selenium.dev/documentation/pt-br/driver_idiosyncrasies/shared_capabilities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/pt-br/driver_idiosyncrasies/shared_capabilities/</guid><description>Para criar uma nova sessão por Selenium WebDriver, a extremidade local deve fornecer os recursos básicos para a extremidade remota. A extremidade remota usa o mesmo conjunto de recursos para cria uma sessão e descreve os recursos da sessão atual.
WebDriver fornece recursos que cada controle extremidade remota irá/deverá apoiar a implementação. A seguir estão os recursos que o WebDriver suporta:
browserName: Este recurso é usado para definir o browserName para uma determinada sessão.</description></item><item><title>Recursos específicos do Driver</title><link>https://www.selenium.dev/documentation/pt-br/driver_idiosyncrasies/driver_specific_capabilities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/pt-br/driver_idiosyncrasies/driver_specific_capabilities/</guid><description>Firefox Definindo recursos usando FirefoxOptions FirefoxOptions é a nova forma de definir recursos para o Navegador Firefox e geralmente deve ser usado em detrimento de DesiredCapabilities.
Java Python C# Ruby JavaScript Kotlin FirefoxOptions options = new FirefoxOptions(); options.addPreference(&amp;#34;network.proxy.type&amp;#34;, 0); driver = new RemoteWebDriver(options); from selenium.webdriver.firefox.options import Options options = Options() options.headless = True driver = webdriver.Firefox(options=options) var options = new FirefoxOptions(); options.Proxy.Kind = ProxyKind.Direct; var driver = new FirefoxDriver(options); require &amp;#39;selenium-webdriver&amp;#39; opts = Selenium::WebDriver::Firefox::Options.</description></item></channel></rss>