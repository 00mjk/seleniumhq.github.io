<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Grid 4 on Seleniumドキュメント</title><link>https://www.selenium.dev/documentation/ja/grid/grid_4/</link><description>Recent content in Grid 4 on Seleniumドキュメント</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>2013-{year}</copyright><atom:link href="https://www.selenium.dev/documentation/ja/grid/grid_4/index.xml" rel="self" type="application/rss+xml"/><item><title>グリッドのコンポーネント</title><link>https://www.selenium.dev/documentation/ja/grid/grid_4/components_of_a_grid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ja/grid/grid_4/components_of_a_grid/</guid><description>ルーター ルーターがリクエストを正しいコンポーネントに転送します。
これはGridのエントリポイントであり、すべての外部リクエストはGridによって受信されます。 ルーターの動作は、リクエストによって異なります。 新しいセッション要求の場合、ルーターはそれをディストリビュータに転送します（新しいセッションの作成が処理されます）。 リクエストが既存のセッションに属している場合、ルーターはセッションIDをセッションマップに送信し、 セッションマップはセッションが実行されているノードを返します。 この後、ルーターはリクエストをノードに転送します。
ルーターは、プロセスで不要なコンポーネントをオーバーロードすることなく、 より適切に処理できるコンポーネントにリクエストを送信することにより、 Grid内の負荷のバランスをとることを目的としています。
ディストリビューター ディストリビューターは、すべてのノードとそのケイパビリティを認識しています。 その主な役割は、新しいセッション要求を受け取り、セッションを作成できる適切なノードを見つけることです。 セッションが作成されると、ディストリビューターは、 セッションIDとセッションが実行されているノードとの関係をセッションマップに格納します。
ノード ノードはGrid内に数回存在することができます。 各ノードは、それが実行されているマシンの利用可能なブラウザのスロットを管理します。
ノードは、イベントバスを介して自身をディストリビューターに登録し、その構成は登録メッセージの一部として送信されます。
デフォルトでは、ノードは、実行されているマシンのパスで使用可能なすべてのブラウザードライバーを自動登録します。 また、ChromiumベースのブラウザーとFirefoxで使用可能なCPUごとに1つのスロットを作成します。 SafariおよびInternet Explorerの場合、作成されるスロットは1つだけです。 特定の構成を通じて、Dockerコンテナーでセッションを実行できます。 次のセクションで構成の詳細を確認できます。
ノードは受信したコマンドを実行するだけで、評価、判断、制御は行いません。 ノードが実行されているマシンは、他のコンポーネントと同じオペレーティングシステムを持つ必要はありません。 たとえば、WindowsノードにはInternet Explorerをブラウザーオプションとして提供する機能がありますが、 これはLinuxまたはMacでは不可能です。
セッションマップ セッションマップは、セッションIDとセッションが実行されているノードの情報を保持するデータストアです。 これは、リクエストをノードに転送するプロセスにおけるルーターのサポートとして機能します。 ルーターは、セッションIDに関連付けられたノードをセッションマップに要求します。 完全分散モードでGridを開始する場合、セッションマップは、開始する必要がある最初のコンポーネントです。
イベントバス イベントバスは、ノード、ディストリビュータ、およびセッションマップ間の通信パスとして機能します。 Gridは、メッセージを介して内部通信の大部分を行い、高価なHTTP呼び出しを回避します。
Gridの役割 Grid3では、コンポーネントはハブとノードであり、スタンドアロンモードでGridを起動することでそれらを一緒に実行することが可能でした。 同じ概念がGrid4でも利用可能であり、上記のコンポーネントのいくつかをグループ化することでハブを実行することが可能です。 また、スタンドアロンモードですべてのコンポーネントを一緒に実行することも可能です。
ハブ ハブは、次のコンポーネントの結合です。
ルーター ディストリビューター セッションマップ イベントバス 従来のハブとノードのセットアップを可能にします。
スタンドアロン 前述のように、スタンドアロンはすべてのコンポーネントの結合であり、ユーザーの目には、それらは1つのコンポーネントとして実行されます。 これには、ハブの一部であるすべてのコンポーネントと1つのノードが含まれます。 スタンドアロンモードで起動すると、1つの完全に機能するGridを使用できます。</description></item><item><title>独自のグリッドを設定する</title><link>https://www.selenium.dev/documentation/ja/grid/grid_4/setting_up_your_own_grid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ja/grid/grid_4/setting_up_your_own_grid/</guid><description>Selenium4でのグリッド設定のさまざまなモード スタンドアロン ハブとノード 分散 Docker スタンドアロンモード 新しいSeleniumServer Jarには、グリッドを実行するために必要なすべてのものが含まれています。 Seleniumグリッドを起動するのも最も簡単なモードです。 デフォルトでは、サーバーは http://localhost:4444 でリッスンします。 これは、RemoteWebDriverテストを指定する必要があるURLです。 サーバーは、システムパスから使用できる使用可能なドライバーを検出します。
java -jar selenium-server-4.0.0-alpha-7.jar standalone ハブとノードモード ハブを開始する java -jar selenium-server-4.0.0-alpha-7.jar hub ノードを登録する java -jar selenium-server-4.0.0-alpha-7.jar node --detect-drivers Seleniumグリッドをクエリする Selenium 4では、必要なデータを簡単にクエリしてまったく同じものを取得する新しい方法であるGraphQLを追加しました。
curl -X POST -H &amp;#34;Content-Type: application/json&amp;#34; --data &amp;#39;{ &amp;#34;query&amp;#34;: &amp;#34;{grid{uri}}&amp;#34; }&amp;#39; -s http://localhost:4444/graphql | jq .
分散モード Step 1: まず、イベントバスを開始します。 これは、後続のステップで他のグリッドコンポーネントへの通信パスとして機能します。
java -jar selenium-server-4.0.0-alpha-7.jar event-bus Step 2: セッションマップを開始します。 これは、セッションIDをセッションが実行されているノードにマッピングする役割を果たします。
java -jar selenium-server-4.</description></item><item><title>GraphQLクエリのサポート</title><link>https://www.selenium.dev/documentation/ja/grid/grid_4/graphql_support/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ja/grid/grid_4/graphql_support/</guid><description>GraphQLは、APIのクエリ言語であり、既存のデータでこれらのクエリを実行するためのランタイムです。 これにより、ユーザーは必要なものだけを正確に要求することができます。
列挙型(Enum) 列挙型は、フィールドの可能な値のセットを表します。
たとえば、 Node オブジェクトには status というフィールドがあります。 UP 、 DRAINING 、または UNAVAILABLE の可能性があるため、状態は、 列挙型（具体的には、Status タイプ）です。
スカラー スカラーはプリミティブ値です： Int 、 Float 、 String 、 Boolean 、または ID 。
GraphQL APIを呼び出すときは、スカラーのみを返すまでネストされたサブフィールドを指定する必要があります。
スキーマの構造 グリッドスキーマの構造は次のとおりです。
{ session(id: &amp;#34;&amp;lt;session-id&amp;gt;&amp;#34;) : { id, capabilities, startTime, uri, nodeId, nodeUri, sessionDurationMillis slot : { id, stereotype, lastStarted } } grid: { uri, totalSlots, nodeCount, maxSession, sessionCount, version, sessionQueueSize } sessionsInfo: { sessionQueueRequests, sessions: [ { id, capabilities, startTime, uri, nodeId, nodeUri, sessionDurationMillis slot : { id, stereotype, lastStarted } } ] } nodesInfo: { nodes : [ { id, uri, status, maxSession, slotCount, sessions: [ { id, capabilities, startTime, uri, nodeId, nodeUri, sessionDurationMillis slot : { id, stereotype, lastStarted } } ], sessionCount, stereotypes, version, osInfo: { arch, name, version } } ] } } GraphQLで照会する GraphQLをクエリする最良の方法は、 curl リクエストを使用することです。 GraphQLを使用すると、必要なデータのみをフェッチできます。それ以上でもそれ以下でもありません。</description></item><item><title>グリッドエンドポイント</title><link>https://www.selenium.dev/documentation/ja/grid/grid_4/grid_endpoints/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ja/grid/grid_4/grid_endpoints/</guid><description>Page being translated from English to Japanese. Do you speak Japanese? Help us to translate it by sending us pull requests!
Grid Grid Status Grid status provides the current state of the Grid. It consists of details about every registered Node. For every Node, the status includes information regarding Node availability, sessions, and slots.
cURL GET &amp;#39;http://localhost:4444/status&amp;#39; In the Standalone mode, the Grid URL is the Standalone server address.</description></item></channel></rss>