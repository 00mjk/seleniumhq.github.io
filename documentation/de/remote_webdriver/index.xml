<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Remote WebDriver on Dokumentation für Selenium</title><link>https://www.selenium.dev/documentation/de/remote_webdriver/</link><description>Recent content in Remote WebDriver on Dokumentation für Selenium</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>2013-{year}</copyright><atom:link href="https://www.selenium.dev/documentation/de/remote_webdriver/index.xml" rel="self" type="application/rss+xml"/><item><title>Remote WebDriver Server</title><link>https://www.selenium.dev/documentation/de/remote_webdriver/remote_webdriver_server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/de/remote_webdriver/remote_webdriver_server/</guid><description>Der Server wird immer auf der Maschine ausgeführt, der den gewünschten Browser installiert hat, der für den Test genutzt werden soll. Der Server kann entweder mittels Eingabebeaufforderung oder mittels Programmcode gestartet werden.
Starten des Servers über die Eingabebeaufforderung Nachdem selenium-server-standalone-{VERSION}.jar heruntergeladen wurde, platzieren Sie die Datei auf dem Rechner mit dem entsprechenden Browser. Führen Sie folgenden Befehl in dem Order aus, der die jar-Datei beinhaltet:
java -jar selenium-server-standalone-{VERSION}.jar Überlegungen zum Betrieb des Servers Vom aufrufenden Programm wird erwartet, dass jede Session ordnungsgemäß beendet wird, entweder mit Selenium#stop() oder WebDriver#quit.</description></item><item><title>Remote WebDriver Client</title><link>https://www.selenium.dev/documentation/de/remote_webdriver/remote_webdriver_client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/de/remote_webdriver/remote_webdriver_client/</guid><description>Um einen remote WebDriver Client zu starten, ist es notwendig eine Verbindung zum Remote WebDriver aufzubauen. Das geschiet, indem eine Verbindung zu einer URL aufgebaut wird, der die Testdurchführung vornimmt. Die gewünschte Konfiguration wird mithilfe der Capabilities (= Einstellungen) definiert. Im folgenden Beispiel wird ein remote WebDriver Objekt instanziert, der mit dem remote Webserver, www.example.com, verbunden wird, um dort die Tests mit einem Firefox Browser auszuführen.
Java Python C# Ruby JavaScript Kotlin FirefoxOptions firefoxOptions = new FirefoxOptions(); WebDriver driver = new RemoteWebDriver(new URL(&amp;#34;http://www.</description></item></channel></rss>