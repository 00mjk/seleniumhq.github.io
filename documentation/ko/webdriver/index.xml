<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WebDriver on Selenium 문서</title><link>https://www.selenium.dev/documentation/ko/webdriver/</link><description>Recent content in WebDriver on Selenium 문서</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>2013-{year}</copyright><atom:link href="https://www.selenium.dev/documentation/ko/webdriver/index.xml" rel="self" type="application/rss+xml"/><item><title>구성 요소 이해</title><link>https://www.selenium.dev/documentation/ko/webdriver/understanding_the_components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ko/webdriver/understanding_the_components/</guid><description>WebDriver를 사용하여 테스트 스위트를 빌드하려면 이해하고 이해해야합니다. 다양한 구성 요소를 효과적으로 사용합니다. 모든 것과 마찬가지로 소프트웨어, 다른 사람들은 동일한 아이디어에 대해 다른 용어를 사용합니다. 아래는 이 설명에서 용어가 사용되는 방식에 대한 분석.
술어 API: Application Programming Interface. 이것은 &amp;ldquo;명령&amp;quot;세트입니다 WebDriver를 조작하는 데 사용합니다. Library: API와 필요한 코드를 포함하는 코드 모듈 그것들을 구현하기 위해. 라이브러리는 각 언어 바인딩에 따라 다릅니다 (예 : .jar). Java 용 파일, .NET 용 .dll 파일 등 Driver: 실제 브라우저를 제어합니다.</description></item><item><title>드라이버 요구사항</title><link>https://www.selenium.dev/documentation/ko/webdriver/driver_requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ko/webdriver/driver_requirements/</guid><description>Selenium은 WebDriver를 이용하여 Chrom(ium), Firefox, Internet Explorer, Opera, Safari와 같은 시장의 모든 주요 브라우저들을 지원합니다. 모든 브라우저가 원격 제어에 대한 공식적인 지원을 가지고 있는 것은 아니지만, WebDriver는 가능한 경우 브라우저에 내장된 자동화 지원을 이용하여 브라우저를 구동합니다.
WebDriver의 목적은 브라우저와 실제 사용자의 상호작용을 최대한 모방하는 것이며, 이는 브라우저마다 다른 수준으로 진행될 수 있습니다. 다양한 드라이버 특성에 대한 자세한 내용은 _드라이버 특성_을 참조하십시오.
브라우저 제어를 위한 사용자 대면 인터페이스는 모든 드라이버가 동일하지만, 브라우저 세션을 설정하는 방법에는 약간의 차이가 존재합니다.</description></item><item><title>Browser manipulation</title><link>https://www.selenium.dev/documentation/ko/webdriver/browser_manipulation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ko/webdriver/browser_manipulation/</guid><description>Page being translated from English to Korean. Do you speak Korean? Help us to translate it by sending us pull requests!
Ruby Ruby is not installed by default on Windows. Download the latest version and run the installer. You can leave all settings at default values, except at the Installation Destination and Optional Tasks screen check where you need to check the Add Ruby executables to your PATH checkbox.</description></item><item><title>Element 찾기</title><link>https://www.selenium.dev/documentation/ko/webdriver/locating_elements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ko/webdriver/locating_elements/</guid><description>하나의 element 찾기 웹드라이버를 사용할 때 알아야할 가장 기본적인 테크닉 중 하나는 페이지에서 element들을 찾는 것입니다. 웹드라이버는 다양한 종류의 내장된 셀렉터 타입들을 제공해주고, 그 중 하나는 ID 속성을 통해 element들을 찾는 것입니다:
Java Python C# Ruby JavaScript Kotlin WebElement cheese = driver.findElement(By.id(&amp;#34;cheese&amp;#34;)); driver.find_element(By.ID, &amp;#34;cheese&amp;#34;) IWebElement element = driver.FindElement(By.Id(&amp;#34;cheese&amp;#34;)); cheese = driver.find_element(id: &amp;#39;cheese&amp;#39;) const cheese = driver.findElement(By.id(&amp;#39;cheese&amp;#39;)); val cheese: WebElement = driver.</description></item><item><title>WebDriver Bidi APIs</title><link>https://www.selenium.dev/documentation/ko/webdriver/bidi_apis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ko/webdriver/bidi_apis/</guid><description>Page being translated from English to Korean. Do you speak Korean? Help us to translate it by sending us pull requests!
In Selenium 4, new Evented APIs were introduced that allow users to be able to capture events from the browser as they happen rather than using the traditional approach of Request/Response that WebDriver has used for other APIs.
Internally WebDriver will create a WebSocket connection to the browser for events and commands to be transmitted.</description></item><item><title>Waits</title><link>https://www.selenium.dev/documentation/ko/webdriver/waits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ko/webdriver/waits/</guid><description>Page being translated from English to Korean. Do you speak Korean? Help us to translate it by sending us pull requests!
WebDriver can generally be said to have a blocking API. Because it is an out-of-process library that instructs the browser what to do, and because the web platform has an intrinsically asynchronous nature, WebDriver does not track the active, real-time state of the DOM. This comes with some challenges that we will discuss here.</description></item><item><title>Support classes</title><link>https://www.selenium.dev/documentation/ko/webdriver/support_classes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ko/webdriver/support_classes/</guid><description>Page being translated from English to Korean. Do you speak Korean? Help us to translate it by sending us pull requests!
WebDriver support classes are provided to simplify maintaining your code. They provide a nice abstraction to make modeling HTML element(s) as domain objects easier, also providing helper methods to make using such objects easy to reason about. We will learn about:
Locator Strategies Events LoadableComponent ThreadGuard etc.</description></item><item><title>JavaScript의 alert, prompt, confirm 대화 상자</title><link>https://www.selenium.dev/documentation/ko/webdriver/js_alerts_prompts_and_confirmations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ko/webdriver/js_alerts_prompts_and_confirmations/</guid><description>WebDriver에는 JavaScript의 세 가지 대화 상자를 제어하는 API가 있습니다. 이들 대화 상자의 스타일은 브라우저에 의해 결정되며 제한된 영역만 변경할 수 있습니다.
Alert 경고를 위해 사용되는 가장 단순한 형태의 대화 상자입니다. 대화 상자에는 사용자에게 보여줄 메시지와 버튼 한 개가 있으며, 버튼을 누르면 대화 상자가 닫힙니다. 이 버튼에는 대개 ‘확인’이라는 텍스트가 적혀 있습니다. 다수 브라우저에서는 대화 상자의 닫기 버튼을 눌러 대화 상자를 닫을 수도 있습니다. 이는 확인 버튼을 누르는 것과 같은 동작을 수행합니다.</description></item><item><title>Http proxies</title><link>https://www.selenium.dev/documentation/ko/webdriver/http_proxies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ko/webdriver/http_proxies/</guid><description>Page being translated from English to Korean. Do you speak Korean? Help us to translate it by sending us pull requests!
A proxy server acts as an intermediary for requests between a client and a server. In simple, the traffic flows through the proxy server on its way to the address you requested and back.
A proxy server for automation scripts with Selenium could be helpful for:</description></item><item><title>Page loading strategy</title><link>https://www.selenium.dev/documentation/ko/webdriver/page_loading_strategy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ko/webdriver/page_loading_strategy/</guid><description>Page being translated from English to Korean. Do you speak Korean? Help us to translate it by sending us pull requests!
Defines the current session&amp;rsquo;s page loading strategy. By default, when Selenium WebDriver loads a page, it follows the normal pageLoadStrategy. It is always recommended to stop downloading additional resources (like images, css, js) when the page loading takes lot of time.
The document.readyState property of a document describes the loading state of the current document.</description></item><item><title>Web element</title><link>https://www.selenium.dev/documentation/ko/webdriver/web_element/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ko/webdriver/web_element/</guid><description>Page being translated from English to Korean. Do you speak Korean? Help us to translate it by sending us pull requests!
WebElement represents a DOM element. WebElements can be found by searching from the document root using a WebDriver instance, or by searching under another WebElement.
WebDriver API provides built-in methods to find the WebElements which are based on different properties like ID, Name, Class, XPath, CSS Selectors, link Text, etc.</description></item><item><title>Keyboard</title><link>https://www.selenium.dev/documentation/ko/webdriver/keyboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.selenium.dev/documentation/ko/webdriver/keyboard/</guid><description>Page being translated from English to Korean. Do you speak Korean? Help us to translate it by sending us pull requests!
Keyboard represents a KeyBoard event. KeyBoard actions are performed by using low-level interface which allows us to provide virtualized device input to the web browser.
sendKeys The sendKeys types a key sequence in DOM element even if modifier key sequence is encountered. Here are the list of possible keystrokes that WebDriver Supports.</description></item></channel></rss>